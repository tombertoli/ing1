

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (15 May 2023 19:19:21) as /home/antonio/Ingenieria de Software I/Cuis University/Portfolio1/linux64/CuisUniversity-5706.image!


----End fileIn of /home/antonio/Ingenieria de Software I/Cuis University/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:23:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:23:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:23:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:23:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:23:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:23:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:23:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:23:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:26:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:26:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:26:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:26:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:26:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:27:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:27:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:27:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:27:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:29:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:29:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:30:50'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:30:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:30:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:30:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:30:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:30:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:30:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:30:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:30:56'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'a 5/15/2023 19:32:41' prior: 50604108 overrides: 50604038!
value

	^ -1*value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:32:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:32:41'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'a 5/15/2023 19:32:59' prior: 50604279 overrides: 50604038!
value

	^ value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:32:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:32:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'a 5/15/2023 19:35:09' prior: 50604152!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Withdraw) ifTrue:[-1*aTransaction value] ifFalse:[  aTransaction value]] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:35:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:35:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:35:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:35:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:35:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:35:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:35:10'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'a 5/15/2023 19:35:37' prior: 50604347!
balance

	^transactions sum: [ :aTransaction | aTransaction contributionToBalance] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:35:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:35:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:35:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:35:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:35:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:35:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:35:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:35:40'!
ERROR!
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:36:15'!
contributionToBalance
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:36:21' prior: 50604417!
contributionToBalance
	self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:36:25'!
ERROR!
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:36:38' overrides: 50604422!
contributionToBalance
	self subclassResponsibility ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:36:38' overrides: 50604422!
contributionToBalance
	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #contributionToBalance stamp: 'a 5/15/2023 19:36:38'!
contributionToBalance
	self subclassResponsibility !
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:36:54'!
contributionToBalance
	self subclassResponsibility ! !
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:37:03' prior: 50604431 overrides: 50604445!
contributionToBalance
	^value ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:37:14' prior: 50604436 overrides: 50604445!
contributionToBalance
	^-1*value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:37:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:37:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:37:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:37:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:37:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:37:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:37:15'!
PASSED!

----SNAPSHOT----(15 May 2023 19:37:27) CuisUniversity-5706.image priorSource: 8713034!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:38:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:38:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:38:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:38:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:38:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:38:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:38:16'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'a 5/15/2023 19:51:28' prior: 50604381!
balance

	^transactions inject:0 into: [ :partialBalance :aTransaction|  aTransaction contributeToBalance: partialBalance ]! !
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:51:44'!
contributeToBalance
	self subclassResponsibility ! !
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:51:44' overrides: 50604547!
contributeToBalance
	^value ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:51:44' overrides: 50604547!
contributeToBalance
	^-1*value ! !

!methodRemoval: AccountTransaction #contributionToBalance stamp: 'a 5/15/2023 19:51:44'!
contributionToBalance
	self subclassResponsibility !

!methodRemoval: Deposit #contributionToBalance stamp: 'a 5/15/2023 19:51:44'!
contributionToBalance
	^value !

!methodRemoval: Withdraw #contributionToBalance stamp: 'a 5/15/2023 19:51:44'!
contributionToBalance
	^-1*value !
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:52:05'!
contributeToBalance: aBalance
	self subclassResponsibility ! !
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:52:05' overrides: 50604571!
contributeToBalance: aBalance
	^value ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:52:05' overrides: 50604571!
contributeToBalance: aBalance
	^-1*value ! !

!methodRemoval: AccountTransaction #contributeToBalance stamp: 'a 5/15/2023 19:52:05'!
contributeToBalance
	self subclassResponsibility !

!methodRemoval: Deposit #contributeToBalance stamp: 'a 5/15/2023 19:52:05'!
contributeToBalance
	^value !

!methodRemoval: Withdraw #contributeToBalance stamp: 'a 5/15/2023 19:52:05'!
contributeToBalance
	^-1*value !
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:52:18' prior: 50604576 overrides: 50604571!
contributeToBalance: aBalance
	^aBalance + value ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:52:33' prior: 50604580 overrides: 50604571!
contributeToBalance: aBalance
	^aBalance - value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:52:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 19:52:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:52:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 19:52:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 19:52:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 19:52:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 19:52:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 19:52:51'!
PASSED!

----SNAPSHOT----(15 May 2023 19:53:01) CuisUniversity-5706.image priorSource: 8730694!
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:53:51'!
contributionToBalance: aBalance
	self subclassResponsibility ! !
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:53:51' overrides: 50604660!
contributionToBalance: aBalance
	^aBalance + value ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:53:51' overrides: 50604660!
contributionToBalance: aBalance
	^aBalance - value ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 19:53:51' prior: 50604540!
balance

	^transactions inject:0 into: [ :partialBalance :aTransaction|  aTransaction contributionToBalance: partialBalance ]! !

!methodRemoval: AccountTransaction #contributeToBalance: stamp: 'a 5/15/2023 19:53:51'!
contributeToBalance: aBalance
	self subclassResponsibility !

!methodRemoval: Deposit #contributeToBalance: stamp: 'a 5/15/2023 19:53:51'!
contributeToBalance: aBalance
	^aBalance + value !

!methodRemoval: Withdraw #contributeToBalance: stamp: 'a 5/15/2023 19:53:51'!
contributeToBalance: aBalance
	^aBalance - value !
!AccountTransaction methodsFor: 'accessing' stamp: 'a 5/15/2023 19:54:02'!
contributeToBalance: aBalance
	self subclassResponsibility ! !
!Deposit methodsFor: 'accessing' stamp: 'a 5/15/2023 19:54:02' overrides: 50604695!
contributeToBalance: aBalance
	^aBalance + value ! !
!Withdraw methodsFor: 'accessing' stamp: 'a 5/15/2023 19:54:02' overrides: 50604695!
contributeToBalance: aBalance
	^aBalance - value ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 19:54:02' prior: 50604675!
balance

	^transactions inject:0 into: [ :partialBalance :aTransaction|  aTransaction contributeToBalance: partialBalance ]! !

!methodRemoval: AccountTransaction #contributionToBalance: stamp: 'a 5/15/2023 19:54:02'!
contributionToBalance: aBalance
	self subclassResponsibility !

!methodRemoval: Deposit #contributionToBalance: stamp: 'a 5/15/2023 19:54:02'!
contributionToBalance: aBalance
	^aBalance + value !

!methodRemoval: Withdraw #contributionToBalance: stamp: 'a 5/15/2023 19:54:02'!
contributionToBalance: aBalance
	^aBalance - value !

----SNAPSHOT----(15 May 2023 19:54:09) CuisUniversity-5706.image priorSource: 8736216!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:11:59'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:18:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:18:16'!
test01PortfolioVacioEsVacio
	self assert: Portfolio new accounts isEmpty ! !

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:18:42'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'no messages' stamp: 'a 5/15/2023 20:19:29'!
accounts 
	^#()! !

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:19:31'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:23:10'!
test02UnaCuentaEstaEnUnPortfolioQueLaAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= ReceptiveAccount new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includesValue: anAccount)! !

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:23:16'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:23:25'!
addAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:23:49'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:23:44' prior: 50604788!
addAccount: anAccount 
	accounts add: anAccount! !

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:23:51'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:23:51'!
ERROR!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:23:51'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:24:51' overrides: 16920235!
initialize 
	accounts:= Set new ! !

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:26:14'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:26:14'!
ERROR!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:26:14'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:26:26' prior: 50604768!
accounts 
	^accounts! !

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:26:27'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:26:27'!
ERROR!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:26:27'!
ERROR!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:28:21' prior: 50604774!
test02UnaCuentaEstaEnUnPortfolioQueLaAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= ReceptiveAccount new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includes: anAccount)! !

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:28:21'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:28:21'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:28:21'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:30:43'!
test03UnaEstaEnUnPortfolioQueLaAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= ReceptiveAccount new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includes: anAccount)! !

!testRun: #PortfolioTest #test03UnaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #PortfolioTest #test03UnaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 20:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 20:30:43'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:31:01'!
test03UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= ReceptiveAccount new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includes: anAccount)! !

!methodRemoval: PortfolioTest #test03UnaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:31:01'!
test03UnaEstaEnUnPortfolioQueLaAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= ReceptiveAccount new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includes: anAccount)!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:31:15' prior: 50604911!
test03UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= Portfolio new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includes: anAccount)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:31:24' prior: 50604931!
test03UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| anAccount containerPortfolio |
	containerPortfolio:= Portfolio new. 
	anAccount:= Portfolio new.
	containerPortfolio addAccount:  anAccount. 
	self assert: (containerPortfolio accounts includes: anAccount)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:31:32' prior: 50604941!
test03UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| portfolioToAdd containerPortfolio |
	containerPortfolio:= Portfolio new. 
	portfolioToAdd:= Portfolio new.
	containerPortfolio addAccount:  portfolioToAdd. 
	self assert: (containerPortfolio accounts includes: portfolioToAdd)! !

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:31:34'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:33:36' prior: 50604952!
test03UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| portfolioToAdd containerPortfolio |
	containerPortfolio:= Portfolio new. 
	portfolioToAdd:= Portfolio new.
	containerPortfolio addPortfolio:  portfolioToAdd. 
	self assert: (containerPortfolio portfolios includes: portfolioToAdd)! !

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:33:39'!
ERROR!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 20:33:53'!
addPortfolio: portfolioToAdd 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 20:34:35' prior: 50604992!
addPortfolio: aPortfolioToAdd 
	! !

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:34:38'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:34:51'!
portfolios
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:35:21'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:35:19' prior: 50605004!
portfolios
	^portfolios! !
!Portfolio methodsFor: 'initialization' stamp: 'a 5/15/2023 20:35:48' prior: 50604815 overrides: 16920235!
initialize 
	accounts:= Set new. 
	portfolios := Set new! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 20:36:16' prior: 50604997!
addPortfolio: aPortfolioToAdd 
	portfolios:= portfolios add: aPortfolioToAdd ! !

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:36:17'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:36:17'!
PASSED!

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:36:17'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:36:47'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:36:48'!
PASSED!

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:36:48'!
ERROR!

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:36:48'!
ERROR!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 20:37:27' prior: 50605026!
addPortfolio: aPortfolioToAdd 
	portfolios add: aPortfolioToAdd ! !

!testRun: #PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:37:31'!
PASSED!

!testRun: #PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:37:31'!
PASSED!

!testRun: #PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:37:31'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:38:33'!
test04UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| portfolioToAdd containerPortfolio |
	containerPortfolio:= Portfolio new. 
	portfolioToAdd:= Portfolio new.
	containerPortfolio addPortfolio:  portfolioToAdd. 
	self assert: (containerPortfolio portfolios includes: portfolioToAdd)! !

!methodRemoval: PortfolioTest #test02UnaCuentaEstaEnUnPortfolioQueLaAgrego stamp: 'a 5/15/2023 20:38:58'!
test02UnaCuentaEstaEnUnPortfolioQueLaAgrego
	| anAccount portfolio |
	portfolio:= Portfolio new. 
	anAccount:= ReceptiveAccount new.
	portfolio addAccount:  anAccount. 
	self assert: (portfolio accounts includes: anAccount)!

!methodRemoval: PortfolioTest #test03UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:38:59'!
test03UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| portfolioToAdd containerPortfolio |
	containerPortfolio:= Portfolio new. 
	portfolioToAdd:= Portfolio new.
	containerPortfolio addPortfolio:  portfolioToAdd. 
	self assert: (containerPortfolio portfolios includes: portfolioToAdd)!

!methodRemoval: PortfolioTest #test04UnPortfolioEstaEnUnPortfolioQueLoAgrego stamp: 'a 5/15/2023 20:39:03'!
test04UnPortfolioEstaEnUnPortfolioQueLoAgrego
	| portfolioToAdd containerPortfolio |
	containerPortfolio:= Portfolio new. 
	portfolioToAdd:= Portfolio new.
	containerPortfolio addPortfolio:  portfolioToAdd. 
	self assert: (containerPortfolio portfolios includes: portfolioToAdd)!

!methodRemoval: Portfolio #accounts stamp: 'a 5/15/2023 20:39:21'!
accounts 
	^accounts!

!methodRemoval: Portfolio #addAccount: stamp: 'a 5/15/2023 20:39:22'!
addAccount: anAccount 
	accounts add: anAccount!

!methodRemoval: Portfolio #addPortfolio: stamp: 'a 5/15/2023 20:39:25'!
addPortfolio: aPortfolioToAdd 
	portfolios add: aPortfolioToAdd !

!methodRemoval: Portfolio #initialize stamp: 'a 5/15/2023 20:39:29'!
initialize 
	accounts:= Set new. 
	portfolios := Set new!

!methodRemoval: Portfolio #portfolios stamp: 'a 5/15/2023 20:39:30'!
portfolios
	^portfolios!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:39:44'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:41:19'!
test01PortfolioNuevoTieneBalanceCero
	self assert: Portfolio new balances equals: 0! !

!methodRemoval: PortfolioTest #test01PortfolioVacioEsVacio stamp: 'a 5/15/2023 20:41:24'!
test01PortfolioVacioEsVacio
	self assert: Portfolio new accounts isEmpty !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:41:28'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:41:38'!
balances
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:41:43' prior: 50605162!
balances
	^0! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:42:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:42:13'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:49:56'!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuenta portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	self assert: cuenta balance equals: (portfolio agregarCuenta: cuenta)! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:50:10'!
ERROR!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:50:23' prior: 50605148!
test01PortfolioNuevoTieneBalanceCero
	self assert: 0 equals: Portfolio new balances! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:50:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:50:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:50:24'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:50:24'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:50:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:50:33'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:50:33'!
ERROR!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 20:50:46'!
agregarCuenta: cuenta 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:53:00'!
Object subclass: #Portfolio
	instanceVariableNames: 'balances'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 20:52:56' prior: 50605219!
agregarCuenta: unaCuenta 
	balances:=unaCuenta balance  ! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:53:06'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:53:06'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:53:19' prior: 50605176!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuenta portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	self assert: cuenta balance equals: (portfolio agregarCuenta: cuenta) balances! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:53:20'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:53:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:53:20'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:53:39'!
balance
	^0! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:53:39' prior: 50605244!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuenta portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	self assert: cuenta balance equals: (portfolio agregarCuenta: cuenta) balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:53:39' prior: 50605189!
test01PortfolioNuevoTieneBalanceCero
	self assert: 0 equals: Portfolio new balance! !

!methodRemoval: Portfolio #balances stamp: 'a 5/15/2023 20:53:39'!
balances
	^0!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 20:56:47' prior: 50605268!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuenta portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	cuenta register: (Deposit for: 2).
	self assert: cuenta balance equals: (portfolio agregarCuenta: cuenta) balance! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:56:52'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:57:10'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:57:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:57:14'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:57:14'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 20:57:46' prior: 50605264!
balance
	^balances! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 20:57:53'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:57:53' prior: 50605315!
balance
	^balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 20:57:54' prior: 50605231!
agregarCuenta: unaCuenta 
	balance:=unaCuenta balance  ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 20:57:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/15/2023 20:58:01'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:58:04'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:58:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:58:04'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:58:29'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 20:58:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 20:58:29'!
FAILURE!

portfolio := Portfolio new.
cuenta := ReceptiveAccount new.
portfolio add: cuenta.

!

portfolio := Portfolio new.
cuenta := ReceptiveAccount new.
portfolio addAccount: cuenta.

!

portfolio := Portfolio new.
cuenta := ReceptiveAccount new.
portfolio agregarCuenta: cuenta.

!

cuenta register: (Deposit for: 500)!

portfolio  balance!

cuenta balance !

portfolio  balance !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:02:11' overrides: 16920235!
initialize 
	balance:=0.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 21:04:21'!
Object subclass: #Portfolio
	instanceVariableNames: 'cuenta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:04:21' prior: 50605330!
agregarCuenta: unaCuenta 
	cuenta:=unaCuenta balance  ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:04:21' prior: 50605419 overrides: 16920235!
initialize 
	cuenta:=0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:04:21' prior: 50605326!
balance
	^cuenta! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:04:24' prior: 50605431!
agregarCuenta: unaCuenta 
	cuenta:=unaCuenta ! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:04:32' prior: 50605437 overrides: 16920235!
initialize 
! !

!methodRemoval: Portfolio #initialize stamp: 'a 5/15/2023 21:04:35'!
initialize 
!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:05:06' prior: 50605441!
balance
	cuenta ifNotNil: [^cuenta balance].
	^0.! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:05:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:05:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:06:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:06:56'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:08:18' prior: 50605286!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuenta portfolio otraCuenta |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	cuenta register: (Deposit for: 2).
	
	otraCuenta := ReceptiveAccount new.
	otraCuenta register: (Deposit for: 4).
	self assert: cuenta balance equals: (portfolio agregarCuenta: cuenta) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:09:09' prior: 50605475!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 4).
	
	portfolio agregarCuenta: cuentaAAgregar.
	portfolio agregarCuenta: segundaCuentaAAgregar .
	self assert: cuentaAAgregar balance equals: portfolio balance! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:09:19'!
add: unaCuenta 
	cuenta:=unaCuenta ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:09:19' prior: 50605489!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 4).
	
	portfolio add: cuentaAAgregar.
	portfolio add: segundaCuentaAAgregar .
	self assert: cuentaAAgregar balance equals: portfolio balance! !

!methodRemoval: Portfolio #agregarCuenta: stamp: 'a 5/15/2023 21:09:19'!
agregarCuenta: unaCuenta 
	cuenta:=unaCuenta !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:09:27' prior: 50605512!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 4).
	
	portfolio add: cuentaAAgregar.
	portfolio add: segundaCuentaAAgregar .
	self assert: cuentaAAgregar balance + segundaCuentaAAgregar balance equals: portfolio balance! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:09:28'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 21:10:04'!
Object subclass: #Portfolio
	instanceVariableNames: 'cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:10:04' prior: 50605456!
balance
	cuentas ifNotNil: [^cuentas balance].
	^0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:10:04' prior: 50605507!
add: unaCuenta 
	cuentas:=unaCuenta ! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:10:32' prior: 50605563!
balance
	^cuentas sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:10:37'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:10:37'!
ERROR!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:10:47' prior: 50605568!
add: unaCuenta 
	cuentas add: unaCuenta.! !
!Portfolio methodsFor: 'nil' stamp: 'a 5/15/2023 21:11:05' overrides: 16920235!
initialize

	cuentas := OrderedCollection new.! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:11:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:11:31'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:11:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:11:31'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:11:45' prior: 50605572!
balance
	^cuentas sum: [:anAccount | anAccount balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:11:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:11:46'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:12:23'!
test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 4).
	
	portfolio add: cuentaAAgregar.
	portfolio add: segundaCuentaAAgregar .
	self assert: cuentaAAgregar balance + segundaCuentaAAgregar balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:12:28' prior: 50605618!
test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas
	| cuentaAAgregar portfolio portfolioAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 4).
	
	portfolio add: cuentaAAgregar.
	portfolio add: portfolioAAgregar .
	self assert: cuentaAAgregar balance + portfolioAAgregar balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:13:18' prior: 50605637!
test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas
	| cuentaAAgregar portfolio portfolioAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	portfolioAAgregar := Portfolio new.
	portfolioAAgregar add: (ReceptiveAccount new register: (Deposit for: 4)).
	
	portfolio add: cuentaAAgregar.
	portfolio add: portfolioAAgregar .
	self assert: cuentaAAgregar balance + portfolioAAgregar balance equals: portfolio balance! !

!testRun: #PortfolioTest #test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas stamp: 'a 5/15/2023 21:13:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:13:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:13:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas stamp: 'a 5/15/2023 21:13:23'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:16:36' prior: 50605606!
balance
	cuentas size = 1 ifTrue: [^cuentas first balance.]
	^0.! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:16:39' prior: 50605689!
balance
	cuentas size = 1 ifTrue: [^cuentas first balance.].
	^0.! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:17:57' prior: 50605533!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuentaAAgregar portfolio |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	portfolio add: cuentaAAgregar.
	self assert: cuentaAAgregar balance equals: portfolio balance! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:18:01'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:18:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:18:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas stamp: 'a 5/15/2023 21:18:01'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas stamp: 'a 5/15/2023 21:18:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:19:00' prior: 50605694!
balance
	^cuentas sum: [:anAccount | anAccount balance.] ifEmpty: [0]! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:24:49'!
addAccount: unaCuenta 
	cuentas add: unaCuenta.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:24:49' prior: 50605584!
add: unaCuenta 
	cuentas addAccount: unaCuenta.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:24:49' prior: 50605736!
addAccount: unaCuenta 
	cuentas addAccount: unaCuenta.! !

!methodRemoval: Portfolio #add: stamp: 'a 5/15/2023 21:24:49'!
add: unaCuenta 
	cuentas addAccount: unaCuenta.!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 21:24:59'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #balance stamp: 'a 5/15/2023 21:25:06'!
balance
	^cuentas sum: [:anAccount | anAccount balance.] ifEmpty: [0]!

!methodRemoval: Portfolio #initialize stamp: 'a 5/15/2023 21:25:15'!
initialize

	cuentas := OrderedCollection new.!

!methodRemoval: PortfolioTest #test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta stamp: 'a 5/15/2023 21:25:24'!
test02PortfolioConUnaCuentaTieneBalanceIgualALaCuenta
	| cuentaAAgregar portfolio |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	portfolio add: cuentaAAgregar.
	self assert: cuentaAAgregar balance equals: portfolio balance!

!methodRemoval: PortfolioTest #test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas stamp: 'a 5/15/2023 21:25:25'!
test03PortfolioConUnaCuentaYUnPortfolioTieneBalanceIgualALaSumaDeAmbas
	| cuentaAAgregar portfolio portfolioAAgregar |
	portfolio:=Portfolio new. 
	cuentaAAgregar:=ReceptiveAccount new. 
	cuentaAAgregar register: (Deposit for: 2).
	
	portfolioAAgregar := Portfolio new.
	portfolioAAgregar add: (ReceptiveAccount new register: (Deposit for: 4)).
	
	portfolio add: cuentaAAgregar.
	portfolio add: portfolioAAgregar .
	self assert: cuentaAAgregar balance + portfolioAAgregar balance equals: portfolio balance!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:25:29'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:25:34'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:25:37' prior: 50605809!
balance
	^0! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:25:40'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:25:40'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:27:07'!
test02PortfolioConUnaCuentaTieneElMismoBalance
	| cuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar regsiter: (Deposit for: 5).
	self assert: 0 equals: (Portfolio new addAccount: cuentaAAgregar) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:27:15' prior: 50605823!
test02PortfolioConUnaCuentaTieneElMismoBalance
	| cuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	self assert: 0 equals: (Portfolio new addAccount: cuentaAAgregar) balance! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:27:18'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 21:27:39'!
Object subclass: #Portfolio
	instanceVariableNames: 'cuenta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:27:38' prior: 50605746!
addAccount: unaCuenta 
	cuenta := unaCuenta! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:27:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:27:41'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:27:56'!
test02PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	self assert: 0 equals: (Portfolio new addAccount: cuentaAAgregar) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:29:01' prior: 50605865!
test02PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio ṕortfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 0 equals: ṕortfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:29:14' prior: 50605875!
test02PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 0 equals: portfolio balance! !

!testRun: #PortfolioTest #test02PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:29:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:29:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:29:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:29:15'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:29:26' prior: 50605893!
test02PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance! !

!testRun: #PortfolioTest #test02PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:29:27'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:29:41'!
test03PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test02PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:29:41'!
test02PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:29:47' prior: 50605833!
test02PortfolioConUnaCuentaTieneElMismoBalance
	| cuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	self assert: 5 equals: (Portfolio new addAccount: cuentaAAgregar) balance! !

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:29:48'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:29:56' prior: 50605813!
balance
	^cuenta balance! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:29:57'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:29:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:29:57'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:30:06'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:30:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:30:06'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:30:29' prior: 50605992!
balance
	cuenta ifNotNil: [^cuenta balance].
	^0! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:30:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:30:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:30:29'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:30:29'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 21:30:39'!
Object subclass: #Portfolio
	instanceVariableNames: 'cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:30:39' prior: 50605854!
addAccount: unaCuenta 
	cuentas := unaCuenta! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/15/2023 21:30:39' prior: 50606017!
balance
	cuentas ifNotNil: [^cuentas balance].
	^0! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:30:44' prior: 50606043!
addAccount: unaCuenta 
	cuentas add: unaCuenta! !
!Portfolio methodsFor: 'initialization' stamp: 'a 5/15/2023 21:30:56' overrides: 16920235!
initialize

	cuentas := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:31:00'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:31:00'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:31:00'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:31:28' prior: 50606048!
balance
	^cuentas sum: [:anAccount | anAccount balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:31:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:31:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:31:29'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:35:24'!
test04PortfolioConPortfoliosTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:35:34' prior: 50606088!
test04PortfolioConPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundaCuentaAAgregar |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: portfolioAAgregar.
	portfolio addAccount: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:35:49' prior: 50606105!
test04PortfolioConPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundoPortfolioAAgregar |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	segundoPortfolioAAgregar := ReceptiveAccount new.
	segundoPortfolioAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addAccount: portfolioAAgregar.
	portfolio addAccount: segundoPortfolioAAgregar.
	self assert: 8 equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:36:00' prior: 50606122!
test04PortfolioConPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundoPortfolioAAgregar |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	segundoPortfolioAAgregar := ReceptiveAccount new.
	segundoPortfolioAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioAAgregar.
	portfolio addPortfolio: segundoPortfolioAAgregar.
	self assert: 8 equals: portfolio balance! !

!testRun: #PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:36:01'!
ERROR!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:36:07'!
addPortfolio: portfolioAAgregar 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/15/2023 21:36:28'!
Object subclass: #Portfolio
	instanceVariableNames: 'cuentas portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/15/2023 21:36:27' prior: 50606161!
addPortfolio: aPortfolioToAdd 
	portfolios add: aPortfolioToAdd ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:36:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:36:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:36:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:36:32'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:36:32'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'a 5/15/2023 21:36:51' prior: 50606058 overrides: 16920235!
initialize

	cuentas := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:36:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:36:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:36:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:36:53'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:36:53'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/15/2023 21:37:40' prior: 50606073!
balance
	^(cuentas sum: [:anAccount | anAccount balance] ifEmpty: [0]) +
		(portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0])! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/15/2023 21:37:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/15/2023 21:37:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/15/2023 21:37:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:37:40'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/15/2023 21:38:00'!
test04PortfolioConDosPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundoPortfolioAAgregar |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	segundoPortfolioAAgregar := ReceptiveAccount new.
	segundoPortfolioAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioAAgregar.
	portfolio addPortfolio: segundoPortfolioAAgregar.
	self assert: 8 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test04PortfolioConPortfoliosTieneElMismoBalance stamp: 'a 5/15/2023 21:38:00'!
test04PortfolioConPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundoPortfolioAAgregar |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	segundoPortfolioAAgregar := ReceptiveAccount new.
	segundoPortfolioAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioAAgregar.
	portfolio addPortfolio: segundoPortfolioAAgregar.
	self assert: 8 equals: portfolio balance!

----SNAPSHOT----(15 May 2023 21:44:38) CuisUniversity-5706.image priorSource: 8738531!

----STARTUP---- (18 May 2023 20:18:34) as /home/antonio/Ingenieria de Software I/Cuis University/Portfolio1/linux64/CuisUniversity-5706.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/18/2023 20:18:40'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:18:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:18:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:18:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:18:56'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/18/2023 20:24:20'!
test05PortfolioVacioNoTieneAUnregistro
	| portfolioAAgregar portfolio |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	portfolio := Portfolio new.
	self deny: portfolio hasRegister: portfolioAAgregar ! !

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:24:22'!
ERROR!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/18/2023 20:24:30' prior: 50606324!
test05PortfolioVacioNoTieneAUnregistro
	| portfolioAAgregar portfolio |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	portfolio := Portfolio new.
	self deny: (portfolio hasRegister: portfolioAAgregar)! !

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:24:32'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:24:42'!
hasRegister: portfolioAAgregar 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:24:52' prior: 50606352!
hasRegister: portfolioAAgregar 
	 ^False! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:25:02'!
hasRegistered: portfolioAAgregar 
	 ^False! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/18/2023 20:25:02' prior: 50606338!
test05PortfolioVacioNoTieneAUnregistro
	| portfolioAAgregar portfolio |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	portfolio := Portfolio new.
	self deny: (portfolio hasRegistered: portfolioAAgregar)! !

!methodRemoval: Portfolio #hasRegister: stamp: 'a 5/18/2023 20:25:02'!
hasRegister: portfolioAAgregar 
	 ^False!
!Portfolio methodsFor: 'nil' stamp: 'a 5/18/2023 20:25:09'!
hasRegister: portfolioAAgregar 
	 ^false! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:25:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:25:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:25:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:25:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:10'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:10'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:12'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:13'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:25:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:25:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:25:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:25:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:19'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:19'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:25:47' prior: 50606361!
hasRegistered: portfolioAAgregar 
	 ^false! !

!methodRemoval: Portfolio #hasRegister: stamp: 'a 5/18/2023 20:25:52'!
hasRegister: portfolioAAgregar 
	 ^false!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:25:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:25:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:25:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:25:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:25:55'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/18/2023 20:30:10'!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	| cuentaAAgregar portfolio |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar .
	self assert: (portfolio hasRegistered: (Deposit for: 5))! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:31:21' prior: 50606432!
hasRegistered: unaTransaccion 
	unaTransaccion = 	(Deposit for: 5) ifTrue: [^true].	
	 ^false! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:31:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:31:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:31:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:31:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:31:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:31:22'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:31:22'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:31:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/18/2023 20:31:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:31:34'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/18/2023 20:32:38' prior: 50606457!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	| cuentaAAgregar portfolio depositoAAgregar|
	
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	depositoAAgregar:= Deposit for: 5.
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:32:39'!
FAILURE!

(Deposit for: 5) = Deposit for: 5!

(Deposit for: 5) = (Deposit for: 5)!

deposit := Deposit for: 5.
deposit = deposit.!

oc := OrderedCollection with: deposit.!

deposit = oc first!

deposit = oc first!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:41:55' prior: 50606470!
hasRegistered: unaTransaccion 
	((cuentas at:1)	hasRegistered: unaTransaccion) ifTrue: [^true].
	 ^false! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:41:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:41:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:41:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:41:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:41:56'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:41:56'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:42:16' prior: 50606577!
hasRegistered: unaTransaccion 
	(cuentas size > 0) ifTrue:[^((cuentas at:1)	hasRegistered: unaTransaccion) ifTrue: [^true]].
	 ^false! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:42:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:42:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:42:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:42:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:42:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:42:16'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:42:16'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/18/2023 20:42:33' prior: 50606605!
hasRegistered: unaTransaccion 
	(cuentas size > 0) ifTrue:[((cuentas at:1)	hasRegistered: unaTransaccion) ifTrue: [^true]].
	 ^false! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:42:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:42:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:42:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:42:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:42:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:42:34'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:42:34'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/18/2023 20:43:10' prior: 50606552!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	| cuentaAAgregar portfolio depositoAAgregar|
	
	cuentaAAgregar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: 5.
	cuentaAAgregar register: depositoAAgregar .
	portfolio := Portfolio new.
	portfolio addAccount: cuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:43:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/18/2023 20:43:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/18/2023 20:43:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/18/2023 20:43:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/18/2023 20:43:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/18/2023 20:43:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/18/2023 20:43:11'!
PASSED!

----SNAPSHOT----(18 May 2023 21:42:37) CuisUniversity-5706.image priorSource: 8788037!

----STARTUP---- (20 May 2023 13:56:52) as /home/antonio/Ingenieria de Software I/Cuis University/Portfolio1/linux64/CuisUniversity-5706.image!


!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:01:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:07:08'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:12:50'!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| primeraCuentaAAgregar segundaCuentaAAgregar portfolio depositoAAgregar|
	
	primeraCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar := ReceptiveAccount new.
	
	depositoAAgregar:= Deposit for: 5.
	
	segundaCuentaAAgregar register: depositoAAgregar .
	
	
	portfolio := Portfolio new.
	portfolio addAccount: primeraCuentaAAgregar .
	portfolio addAccount: segundaCuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:12:53'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:12:53'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:12:58'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:12:58'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:14:26' prior: 50606637!
hasRegistered: unaTransaccion 
	(cuentas size > 0) ifTrue:
		[((cuentas at:1)	hasRegistered: unaTransaccion) ifTrue: [^true]].
	(cuentas size > 0) ifTrue:
		[((cuentas at:2)	hasRegistered: unaTransaccion) ifTrue: [^true]].
	 ^false! !

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:14:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:14:30'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:15:31' prior: 50606758!
hasRegistered: unaTransaccion 

	^cuentas anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]. ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/20/2023 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/20/2023 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/20/2023 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/20/2023 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/20/2023 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:15:32'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:16:41'!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| primerPortfolioAAgregar segundaCuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar := ReceptiveAccount new.
	
	depositoAAgregar:= Deposit for: 5.
	
	segundaCuentaAAgregar register: depositoAAgregar .
	
	
	portfolio := Portfolio new.
	portfolio addAccount: primerPortfolioAAgregar .
	portfolio addAccount: segundaCuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:16:54' prior: 50606807!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| primerPortfolioAAgregar segundoPortfolioAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := ReceptiveAccount new.
	segundoPortfolioAAgregar := ReceptiveAccount new.
	
	depositoAAgregar:= Deposit for: 5.
	
	segundoPortfolioAAgregar register: depositoAAgregar .
	
	
	portfolio := Portfolio new.
	portfolio addAccount: primerPortfolioAAgregar .
	portfolio addAccount: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:17:57' prior: 50606827!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	
	
	portfolio := Portfolio new.
	portfolio addPortfolio: primerPortfolioAAgregar .
	portfolio addPortfolio: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:17:58'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:19:20' prior: 50606776!
hasRegistered: unaTransaccion 

	^(cuentas anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]) or: [cuentas anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]]. 
	! !

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:22'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:19:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:27'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:27'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:30'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:30'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:19:49' prior: 50606872!
hasRegistered: unaTransaccion 

	^(cuentas anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]) or: [portfolios anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]]. 
	! !

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:19:50'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:20:09' prior: 50606931!
hasRegistered: unaTransaccion 

	^(cuentas anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]) or: [portfolios anySatisfy:[:portfolio | portfolio hasRegistered: unaTransaccion]]. 
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:20:59' prior: 50606847!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar addAccount: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio addPortfolio: primerPortfolioAAgregar .
	portfolio addPortfolio: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:21:01'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:23:38'!
test09PortfolioVacioNoTieneTransacciones
	| portfolio |
	
	portfolio := Portfolio new.
	self assert: (portfolio transactions isEmpty )! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:23:43' prior: 50606979!
test09PortfolioVacioNoTieneTransacciones
	| portfolio |
	
	portfolio := Portfolio new.
	self assert: portfolio transactions isEmpty ! !

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/20/2023 14:23:44'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/20/2023 14:23:49'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/20/2023 14:23:59' prior: 50606996!
transactions
	^#()! !

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:24:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/20/2023 14:24:01'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:26:32'!
test10PortfolioConUnaCuentaTieneSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	
	self assert: portfolio transactions isEmpty ! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:26:54' prior: 50607040!
test10PortfolioConUnaCuentaTieneSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	self assert: portfolio transactions isEmpty ! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/20/2023 14:28:22' prior: 50607054!
test10PortfolioConUnaCuentaTieneSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio addAccount: cuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar . 
	
	self assert: portfolio transactions equals: transaccionesCuenta.  ! !

!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/20/2023 14:28:24'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:30:59' prior: 50607001!
transactions
	cuentas isEmpty ifFalse: [^cuentas inject: OrderedCollection new into: [
			:transacciones :cuentaActual | 
			transacciones addAll: cuentaActual transactions 
			]
		]
	^#()! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:31:05' prior: 50607100!
transactions
	cuentas isEmpty ifFalse: [^cuentas inject: OrderedCollection new into: [
			:transacciones :cuentaActual | 
			transacciones addAll: cuentaActual transactions .
			]
		]
	^#()! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/20/2023 14:31:10' prior: 50607109!
transactions
	cuentas isEmpty ifFalse: [^cuentas inject: OrderedCollection new into: [
			:transacciones :cuentaActual | 
			transacciones addAll: cuentaActual transactions 
			]
		].
	^#()! !

!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/20/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/20/2023 14:31:15'!
PASSED!

----SNAPSHOT----(20 May 2023 14:31:20) CuisUniversity-5706.image priorSource: 8801832!

----SNAPSHOT----(20 May 2023 14:31:22) CuisUniversity-5706.image priorSource: 8816634!

----STARTUP---- (21 May 2023 11:22:25) as /home/antonio/Ingenieria de Software I/Cuis University/Portfolio1/linux64/CuisUniversity-5706.image!


!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/21/2023 11:28:32'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 11:28:53' prior: 50607072!
test10PortfolioConUnaCuentaTieneSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio addAccount: cuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar . 
	
	self assert:transaccionesCuenta equals: portfolio transactions.! !

!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:28:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/21/2023 11:28:54'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 11:30:22'!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio addAccount: cuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar . 
	
	self assert:transaccionesCuenta equals: portfolio transactions.! !

!methodRemoval: PortfolioTest #test10PortfolioConUnaCuentaTieneSoloEsasTransacciones stamp: 'a 5/21/2023 11:30:22'!
test10PortfolioConUnaCuentaTieneSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio addAccount: cuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar . 
	
	self assert:transaccionesCuenta equals: portfolio transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 11:32:59'!
test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones
	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	
	primeraCuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
		
	segundaCuentaAAgregar:= ReceptiveAccount new. 
	terceraTransaccionAAgregar := Deposit for: 7. 
	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 
	
	portfolio addAccount: primeraCuentaAAgregar . 
	portfolio addAccount: segundaCuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 
	
	self assert:transaccionesCuenta equals: portfolio transactions.! !

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:33:00'!
FAILURE!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:33:54'!
FAILURE!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:33:54'!
FAILURE!

self transactions!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:38:42'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:38:42'!
FAILURE!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:38:42'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:39:24' prior: 50607118!
transactions
	cuentas isEmpty ifFalse: [^cuentas inject: OrderedCollection new into: [
			:transacciones :cuentaActual | 
			transacciones addAll: cuentaActual transactions. 
			transacciones
			]
		].
	^#()! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:39:25'!
PASSED!

!methodRemoval: PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:40:02'!
test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones
	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	
	primeraCuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
		
	segundaCuentaAAgregar:= ReceptiveAccount new. 
	terceraTransaccionAAgregar := Deposit for: 7. 
	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 
	
	portfolio addAccount: primeraCuentaAAgregar . 
	portfolio addAccount: segundaCuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 
	
	self assert:transaccionesCuenta equals: portfolio transactions.!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:41:09' prior: 50607389!
transactions
	cuentas isEmpty ifFalse: [
			^(cuentas at: 1) transactions
			]
	^#()! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:41:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:41:10'!
ERROR!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:41:10'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:41:18'!
ERROR!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:41:18'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:41:25'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:41:35' prior: 50607475!
transactions
	cuentas isEmpty ifFalse: [
			^(cuentas at: 1) transactions
			].
	^#()! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:41:36'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:41:36'!
PASSED!
!PortfolioTest methodsFor: 'nil' stamp: 'a 5/21/2023 11:42:02'!
test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones
    | portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |

    portfolio := Portfolio new.

    primeraCuentaAAgregar:= ReceptiveAccount new. 
    primeraTransaccionAAgregar := Deposit for: 5. 
    segundaTransaccionAAgregar := Withdraw for: 5.
    primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
    primeraCuentaAAgregar register: segundaTransaccionAAgregar . 

    segundaCuentaAAgregar:= ReceptiveAccount new. 
    terceraTransaccionAAgregar := Deposit for: 7. 
    segundaCuentaAAgregar register: terceraTransaccionAAgregar . 

    portfolio addAccount: primeraCuentaAAgregar . 
    portfolio addAccount: segundaCuentaAAgregar . 

    transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    self assert:transaccionesCuenta equals: portfolio transactions.! !

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:42:03'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:43:57' prior: 50607558!
transactions
	cuentas isEmpty ifFalse: [
			(cuentas size = 2) ifTrue: [
				|transacciones| 
				transacciones := (cuentas at: 1) transactions.
				transacciones addAll: (cuentas at: 2) transactions.
				^transacciones 
			].
			^(cuentas at: 1) transactions
			].
	^#()! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:43:58'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:43:58'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:44:08' prior: 50607640!
transactions
	cuentas isEmpty ifFalse: [^cuentas inject: OrderedCollection new into: [
            :transacciones :cuentaActual | 
            transacciones addAll: cuentaActual transactions. 
            transacciones
            ]
        ].
    ^#()! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:44:08'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:44:08'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:44:24' prior: 50607693!
transactions
	^cuentas inject: OrderedCollection new into: [
            :transacciones :cuentaActual | 
            transacciones addAll: cuentaActual transactions. 
            transacciones
 	]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:44:25'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:44:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 11:44:59'!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    | portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |

    portfolio := Portfolio new.

    primeraCuentaAAgregar:= ReceptiveAccount new. 
    primeraTransaccionAAgregar := Deposit for: 5. 
    segundaTransaccionAAgregar := Withdraw for: 5.
    primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
    primeraCuentaAAgregar register: segundaTransaccionAAgregar . 

    segundaCuentaAAgregar:= ReceptiveAccount new. 
    terceraTransaccionAAgregar := Deposit for: 7. 
    segundaCuentaAAgregar register: terceraTransaccionAAgregar . 

    portfolio addAccount: primeraCuentaAAgregar . 
    portfolio addAccount: segundaCuentaAAgregar . 

    transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 11:46:26' prior: 50607795!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |

    	portfolio := Portfolio new.

    	primeraCuentaAAgregar:= ReceptiveAccount new. 
    	primeraTransaccionAAgregar := Deposit for: 5. 
    	segundaTransaccionAAgregar := Withdraw for: 5.
 	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
	
	segundaCuentaAAgregar:= ReceptiveAccount new. 
    	terceraTransaccionAAgregar := Deposit for: 7. 
    	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 

	portfolio addAccount: primeraCuentaAAgregar . 
 	portfolio addAccount: segundaCuentaAAgregar . 

    	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 11:46:43' prior: 50607831!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |

    	portfolio := Portfolio new.

    	primeraCuentaAAgregar:= ReceptiveAccount new. 
    	primeraTransaccionAAgregar := Deposit for: 5. 
    	segundaTransaccionAAgregar := Withdraw for: 5.
 	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
	
	segundaCuentaAAgregar:= ReceptiveAccount new. 
    	terceraTransaccionAAgregar := Deposit for: 7. 
    	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 

	portfolio addAccount: primeraCuentaAAgregar . 
 	portfolio addAccount: segundaCuentaAAgregar . 

    	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    	self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 11:48:12' prior: 50607867!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta primerPortfolioAAgregar |

    	portfolio := Portfolio new.

    	primeraCuentaAAgregar:= ReceptiveAccount new. 
    	primeraTransaccionAAgregar := Deposit for: 5. 
    	segundaTransaccionAAgregar := Withdraw for: 5.
 	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
	primerPortfolioAAgregar := Portfolio new. 
	primerPortfolioAAgregar addAccount: primeraCuentaAAgregar .
	primerPortfolioAAgregar addAccount: segundaCuentaAAgregar .
	
	segundaCuentaAAgregar:= ReceptiveAccount new. 
    	terceraTransaccionAAgregar := Deposit for: 7. 
    	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 
	
	
	
	portfolio addAccount: primeraCuentaAAgregar . 
 	portfolio addAccount: segundaCuentaAAgregar . 

    	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    	self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 11:49:34' prior: 50607903!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta primerPortfolioAAgregar segundoPortfolioAAgregar |

    	portfolio := Portfolio new.

    	primeraCuentaAAgregar:= ReceptiveAccount new. 
    	primeraTransaccionAAgregar := Deposit for: 5. 
    	segundaTransaccionAAgregar := Withdraw for: 5.
 	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
	primerPortfolioAAgregar := Portfolio new. 
	primerPortfolioAAgregar addAccount: primeraCuentaAAgregar .
	
	segundaCuentaAAgregar:= ReceptiveAccount new. 
    	terceraTransaccionAAgregar := Deposit for: 7. 
    	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 
	segundoPortfolioAAgregar := Portfolio new. 
	segundoPortfolioAAgregar addAccount: segundaCuentaAAgregar .
	
	
	
	portfolio addPortfolio: primerPortfolioAAgregar . 
 	portfolio addPortfolio: segundoPortfolioAAgregar. 

    	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    	self assert:transaccionesCuenta equals: portfolio transactions.! !

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:49:37'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:49:46'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:49:46'!
FAILURE!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:49:46'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:49:56'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:49:56'!
FAILURE!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:49:56'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:52:08' prior: 50607745!
transactions
	| transaccionesCuentas transaccionesPortfolios |
	transaccionesCuentas:= cuentas inject: OrderedCollection new into: [
            :transacciones :cuentaActual | 
            transacciones addAll: cuentaActual transactions. 
            transacciones
 	].
	transaccionesPortfolios:= portfolios inject: OrderedCollection new into: [
            :transacciones :cuentaActual | 
            transacciones addAll: cuentaActual transactions. 
            transacciones
 	].
	transaccionesCuentas addAll: transaccionesPortfolios. 
	^transaccionesCuentas.
! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:52:12'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:52:12'!
PASSED!

Object subclass: #Portfolio
	instanceVariableNames: 'cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 11:55:23'!
Object subclass: #Portfolio
	instanceVariableNames: 'cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 11:55:30' prior: 50606174!
addPortfolio: aPortfolioToAdd 
	cuentas add: aPortfolioToAdd ! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:55:38' prior: 50606220!
balance
	^(cuentas sum: [:anAccount | anAccount balance] ifEmpty: [0])! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:55:54' prior: 50606944!
hasRegistered: unaTransaccion 

	^(cuentas anySatisfy:[:cuenta | cuenta hasRegistered: unaTransaccion]) 
	! !
!Portfolio methodsFor: 'initialization' stamp: 'a 5/21/2023 11:56:01' prior: 50606197 overrides: 16920235!
initialize

	cuentas := OrderedCollection new! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:56:10' prior: 50608093!
transactions
	| transaccionesCuentas |
	transaccionesCuentas:= cuentas inject: OrderedCollection new into: [
            :transacciones :cuentaActual | 
            transacciones addAll: cuentaActual transactions. 
            transacciones
 	].
	^transaccionesCuentas.
! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 11:56:25' prior: 50608193!
transactions
	^cuentas inject: OrderedCollection new into: [
            :transacciones :cuentaActual | 
            transacciones addAll: cuentaActual transactions. 
            transacciones
 	].
! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 11:56:32'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 11:56:32'!
PASSED!

Object subclass: #PersonalFinancialFlow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PersonalFinancialFlow category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 12:00:33'!
Object subclass: #PersonalFinancialFlow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PersonalFinancialFlow subclass: #Portfolio
	instanceVariableNames: 'cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 12:00:43'!
PersonalFinancialFlow subclass: #Portfolio
	instanceVariableNames: 'cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PersonalFinancialFlow methodsFor: 'no messages' stamp: 'a 5/21/2023 12:01:23'!
hasRegistered: aTransaction 
	self subclassResponsibility ! !
!PersonalFinancialFlow methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:01:58'!
balance
	self subclassResponsibility ! !
!PersonalFinancialFlow methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:02:03'!
transactions
	self subclassResponsibility ! !

PersonalFinancialFlow subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 12:03:17'!
PersonalFinancialFlow subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:04:28' prior: 50606241!
test04PortfolioConDosPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundoPortfolioAAgregar |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	segundoPortfolioAAgregar := ReceptiveAccount new.
	segundoPortfolioAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio add: portfolioAAgregar.
	portfolio add: segundoPortfolioAAgregar.
	self assert: 8 equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:04:45' prior: 50607945!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta primerPortfolioAAgregar segundoPortfolioAAgregar |

    	portfolio := Portfolio new.

    	primeraCuentaAAgregar:= ReceptiveAccount new. 
    	primeraTransaccionAAgregar := Deposit for: 5. 
    	segundaTransaccionAAgregar := Withdraw for: 5.
 	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
	primerPortfolioAAgregar := Portfolio new. 
	primerPortfolioAAgregar addAccount: primeraCuentaAAgregar .
	
	segundaCuentaAAgregar:= ReceptiveAccount new. 
    	terceraTransaccionAAgregar := Deposit for: 7. 
    	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 
	segundoPortfolioAAgregar := Portfolio new. 
	segundoPortfolioAAgregar addAccount: segundaCuentaAAgregar .
	
	
	
	portfolio add: primerPortfolioAAgregar . 
 	portfolio add: segundoPortfolioAAgregar. 

    	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    	self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:04:50' prior: 50606953!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar addAccount: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio add: primerPortfolioAAgregar .
	portfolio add: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:04:53'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:04:53'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:04:53'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:04:53'!
ERROR!

!methodRemoval: Portfolio #addPortfolio: stamp: 'a 5/21/2023 12:05:01'!
addPortfolio: aPortfolioToAdd 
	cuentas add: aPortfolioToAdd !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 12:05:12'!
add: unaCuenta 
	cuentas add: unaCuenta! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50608330!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones
    	| portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta primerPortfolioAAgregar segundoPortfolioAAgregar |

    	portfolio := Portfolio new.

    	primeraCuentaAAgregar:= ReceptiveAccount new. 
    	primeraTransaccionAAgregar := Deposit for: 5. 
    	segundaTransaccionAAgregar := Withdraw for: 5.
 	primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
	primeraCuentaAAgregar register: segundaTransaccionAAgregar . 
	primerPortfolioAAgregar := Portfolio new. 
	primerPortfolioAAgregar add: primeraCuentaAAgregar .
	
	segundaCuentaAAgregar:= ReceptiveAccount new. 
    	terceraTransaccionAAgregar := Deposit for: 7. 
    	segundaCuentaAAgregar register: terceraTransaccionAAgregar . 
	segundoPortfolioAAgregar := Portfolio new. 
	segundoPortfolioAAgregar add: segundaCuentaAAgregar .
	
	
	
	portfolio add: primerPortfolioAAgregar . 
 	portfolio add: segundoPortfolioAAgregar. 

    	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    	self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50605944!
test03PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	
	segundaCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar register: (Deposit for: 3).
	
	portfolio := Portfolio new.
	portfolio add: cuentaAAgregar.
	portfolio add: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50608374!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar add: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio add: primerPortfolioAAgregar .
	portfolio add: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50605978!
test02PortfolioConUnaCuentaTieneElMismoBalance
	| cuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	self assert: 5 equals: (Portfolio new add: cuentaAAgregar) balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50607600!
test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones
    | portfolio primeraCuentaAAgregar segundaCuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar terceraTransaccionAAgregar transaccionesCuenta |

    portfolio := Portfolio new.

    primeraCuentaAAgregar:= ReceptiveAccount new. 
    primeraTransaccionAAgregar := Deposit for: 5. 
    segundaTransaccionAAgregar := Withdraw for: 5.
    primeraCuentaAAgregar register: primeraTransaccionAAgregar . 
    primeraCuentaAAgregar register: segundaTransaccionAAgregar . 

    segundaCuentaAAgregar:= ReceptiveAccount new. 
    terceraTransaccionAAgregar := Deposit for: 7. 
    segundaCuentaAAgregar register: terceraTransaccionAAgregar . 

    portfolio add: primeraCuentaAAgregar . 
    portfolio add: segundaCuentaAAgregar . 

    transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar with: terceraTransaccionAAgregar . 

    self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50607248!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar transaccionesCuenta |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio add: cuentaAAgregar . 
	
	transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccionAAgregar . 
	
	self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50606723!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| primeraCuentaAAgregar segundaCuentaAAgregar portfolio depositoAAgregar|
	
	primeraCuentaAAgregar := ReceptiveAccount new.
	segundaCuentaAAgregar := ReceptiveAccount new.
	
	depositoAAgregar:= Deposit for: 5.
	
	segundaCuentaAAgregar register: depositoAAgregar .
	
	
	portfolio := Portfolio new.
	portfolio add: primeraCuentaAAgregar .
	portfolio add: segundaCuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:05:12' prior: 50606669!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	| cuentaAAgregar portfolio depositoAAgregar|
	
	cuentaAAgregar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: 5.
	cuentaAAgregar register: depositoAAgregar .
	portfolio := Portfolio new.
	portfolio add: cuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !

!methodRemoval: Portfolio #addAccount: stamp: 'a 5/21/2023 12:05:12'!
addAccount: unaCuenta 
	cuentas add: unaCuenta!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/21/2023 12:05:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:05:26'!
PASSED!

!classRenamed: #PersonalFinancialFlow as: #BankRegister stamp: 'a 5/21/2023 12:07:39'!
Smalltalk renameClassNamed: #PersonalFinancialFlow as: #BankRegister!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 12:08:16' prior: 50608445!
add: unRegistro 
	cuentas add: unRegistro! !

!classRenamed: #BankRegister as: #PersonalRegister stamp: 'a 5/21/2023 12:08:24'!
Smalltalk renameClassNamed: #BankRegister as: #PersonalRegister!
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 12:08:36' prior: 50608176 overrides: 50608290!
balance
	^(cuentas sum: [:aRegister | aRegister balance] ifEmpty: [0])! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 12:08:44' prior: 50608181 overrides: 50608285!
hasRegistered: unaTransaccion 

	^(cuentas anySatisfy:[:registro | registro hasRegistered: unaTransaccion]) 
	! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/21/2023 12:08:52' prior: 50608205 overrides: 50608295!
transactions
	^cuentas inject: OrderedCollection new into: [
            :transacciones :registroActual | 
            transacciones addAll: registroActual transactions. 
            transacciones
 	].
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 12:09:02'!
PersonalRegister subclass: #Portfolio
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:09:02' prior: 50608740 overrides: 50608295!
transactions
	^registros inject: OrderedCollection new into: [
            :transacciones :registroActual | 
            transacciones addAll: registroActual transactions. 
            transacciones
 	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:09:02' prior: 50608188 overrides: 16920235!
initialize

	registros := OrderedCollection new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:09:02' prior: 50608733 overrides: 50608285!
hasRegistered: unaTransaccion 

	^(registros anySatisfy:[:registro | registro hasRegistered: unaTransaccion]) 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:09:02' prior: 50608727 overrides: 50608290!
balance
	^(registros sum: [:aRegister | aRegister balance] ifEmpty: [0])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:09:02' prior: 50608717!
add: unRegistro 
	registros add: unRegistro! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:11:56'!
test05PortfolioVacioNoTieneAUnaTransaccion
	| portfolioAAgregar portfolio |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	portfolio := Portfolio new.
	self deny: (portfolio hasRegistered: portfolioAAgregar)! !

!methodRemoval: PortfolioTest #test05PortfolioVacioNoTieneAUnregistro stamp: 'a 5/21/2023 12:11:56'!
test05PortfolioVacioNoTieneAUnregistro
	| portfolioAAgregar portfolio |
	portfolioAAgregar := ReceptiveAccount new.
	portfolioAAgregar register: (Deposit for: 5).
	
	portfolio := Portfolio new.
	self deny: (portfolio hasRegistered: portfolioAAgregar)!

----SNAPSHOT----(21 May 2023 12:12:28) CuisUniversity-5706.image priorSource: 8816722!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:13:52' prior: 50608792!
test05PortfolioVacioNoTieneAUnaTransaccion
	| portfolio transaccionAVerificar |
	transaccionAVerificar := Deposit for: 5.
	
	portfolio := Portfolio new.
	self deny: (portfolio hasRegistered: transaccionAVerificar)! !

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:13:55'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:13:55'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:17:06'!
cuentaConUnDeposito
	| cuentaAAgregar |
	cuentaAAgregar := ReceptiveAccount new.
	cuentaAAgregar register: (Deposit for: 5).
	self assert: 5 equals: (Portfolio new add: cuentaAAgregar) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:17:37' prior: 50608875!
cuentaConUnDeposito
	| cuenta |
	cuenta := ReceptiveAccount new.
	cuenta register: (Deposit for: 5).
	^cuenta! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:18:00' prior: 50608533!
test02PortfolioConUnaCuentaTieneElMismoBalance
	self assert: 5 equals: (Portfolio new add: self cuentaConUnDeposito ) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:18:39'!
cuentaConUnDeposito: valueOfTransaction
	| cuenta |
	cuenta := ReceptiveAccount new.
	cuenta register: (Deposit for: 5).
	^cuenta! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 12:18:39' prior: 50608891!
test02PortfolioConUnaCuentaTieneElMismoBalance
	self assert: 5 equals: (Portfolio new add: self cuentaConUnDeposito: 5 ) balance! !

!methodRemoval: PortfolioTest #cuentaConUnDeposito stamp: 'a 5/21/2023 12:18:39'!
cuentaConUnDeposito
	| cuenta |
	cuenta := ReceptiveAccount new.
	cuenta register: (Deposit for: 5).
	^cuenta!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:18:43' prior: 50608898!
cuentaConUnDeposito: valueOfTransaction
	| cuenta |
	cuenta := ReceptiveAccount new.
	cuenta register: (Deposit for: valueOfTransaction ).
	^cuenta! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:18:54' prior: 50608906!
test02PortfolioConUnaCuentaTieneElMismoBalance
	self assert: 5 equals: (Portfolio new add: (self cuentaConUnDeposito: 5) ) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:19:29' prior: 50608494!
test03PortfolioConDosCuentasTieneElMismoBalance
	| cuentaAAgregar portfolio segundaCuentaAAgregar |
	cuentaAAgregar := self cuentaConUnDeposito: 5. 
	
	segundaCuentaAAgregar := self cuentaConUnDeposito: 3.
	
	portfolio := Portfolio new.
	portfolio add: cuentaAAgregar.
	portfolio add: segundaCuentaAAgregar.
	self assert: 8 equals: portfolio balance! !

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:19:30'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:19:30'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:19:54' prior: 50608313!
test04PortfolioConDosPortfoliosTieneElMismoBalance
	| portfolioAAgregar portfolio segundoPortfolioAAgregar |
	portfolioAAgregar := self cuentaConUnDeposito: 5. 
	
	segundoPortfolioAAgregar := self cuentaConUnDeposito: 3. 
	
	portfolio := Portfolio new.
	portfolio add: portfolioAAgregar.
	portfolio add: segundoPortfolioAAgregar.
	self assert: 8 equals: portfolio balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:22:34'!
xxx: transactionAmount yyy: aClosure
	| cuentaAAgregar portfolio depositoAAgregar|
	
	cuentaAAgregar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: transactionAmount .
	cuentaAAgregar register: depositoAAgregar .
	portfolio := Portfolio new.
	portfolio add: cuentaAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:23:32' prior: 50609011!
xxx: transactionAmount yyy: aClosure
	| cuentaAAgregar portfolio depositoAAgregar|
	
	cuentaAAgregar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: transactionAmount .
	cuentaAAgregar register: depositoAAgregar .
	aClosure value: cuentaAAgregar value: depositoAAgregar.! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:24:02' prior: 50609025!
xxx: transactionAmount yyy: aClosure
	| depositoAAgregar cuentaAVerificar |
	
	cuentaAVerificar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: transactionAmount .
	cuentaAVerificar register: depositoAAgregar .
	aClosure value: cuentaAVerificar value: depositoAAgregar.! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:24:51'!
cuentaConDepositoDeValor: transactionAmount verifica: aClosure
	| depositoAAgregar cuentaAVerificar |
	
	cuentaAVerificar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: transactionAmount .
	cuentaAVerificar register: depositoAAgregar .
	aClosure value: cuentaAVerificar value: depositoAAgregar.! !

!methodRemoval: PortfolioTest #xxx:yyy: stamp: 'a 5/21/2023 12:24:51'!
xxx: transactionAmount yyy: aClosure
	| depositoAAgregar cuentaAVerificar |
	
	cuentaAVerificar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: transactionAmount .
	cuentaAVerificar register: depositoAAgregar .
	aClosure value: cuentaAVerificar value: depositoAAgregar.!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:25:47' prior: 50608623!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	|  portfolio |
	
	self cuentaConDepositoDeValor: 5 verifica:[ 
		:cuentaAAgregar :depositoAgregado |
		portfolio := Portfolio new.
		portfolio add: cuentaAAgregar .
		self assert: (portfolio hasRegistered: depositoAgregado)
		]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:25:50' prior: 50609072!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	| portfolio |
	
	self cuentaConDepositoDeValor: 5 verifica:[ 
		:cuentaAAgregar :depositoAgregado |
		portfolio := Portfolio new.
		portfolio add: cuentaAAgregar .
		self assert: (portfolio hasRegistered: depositoAgregado)
		]! !

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:25:51'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:25:51'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:28:19' prior: 50608604!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	
	
	
	| portfolio primeraCuentaAAgregar |
	self cuentaConDepositoDeValor: 5 verifica: [
	:segundaCuentaAAgregar :transaccionAgregada | 
		primeraCuentaAAgregar := ReceptiveAccount new.
		portfolio := Portfolio new.
		portfolio add: primeraCuentaAAgregar .
		portfolio add: segundaCuentaAAgregar .
		self assert: (portfolio hasRegistered: transaccionAgregada )
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:28:25' prior: 50609146!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| portfolio primeraCuentaAAgregar |
	self cuentaConDepositoDeValor: 5 verifica: [
	:segundaCuentaAAgregar :transaccionAgregada | 
		primeraCuentaAAgregar := ReceptiveAccount new.
		portfolio := Portfolio new.
		portfolio add: primeraCuentaAAgregar .
		portfolio add: segundaCuentaAAgregar .
		self assert: (portfolio hasRegistered: transaccionAgregada )
	]! !

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:28:27'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:28:27'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:30:06'!
portfolioConDepositoDeValor: valorTransaccion verifica: unaCondicion
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar add: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio add: primerPortfolioAAgregar .
	portfolio add: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:30:24' prior: 50609048!
cuentaConDepositoDeValor: transactionAmount verifica: aCondition
	| depositoAAgregar cuentaAVerificar |
	
	cuentaAVerificar := ReceptiveAccount new.
	depositoAAgregar:= Deposit for: transactionAmount .
	cuentaAVerificar register: depositoAAgregar .
	aCondition value: cuentaAVerificar value: depositoAAgregar.! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:30:35' prior: 50609227!
portfolioConDepositoDeValor: transactionValue verifica: unaCondicion
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar add: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio add: primerPortfolioAAgregar .
	portfolio add: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:30:42' prior: 50609262!
portfolioConDepositoDeValor: transactionValue verifica: aCondition
	| primerPortfolioAAgregar segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	primerPortfolioAAgregar := Portfolio new.
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar add: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio add: primerPortfolioAAgregar .
	portfolio add: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:33:28' prior: 50609284!
portfolioConDepositoDeValor: transactionValue verifica: aCondition
	
	| portfolio primerPortfolioAAgregar |
	portfolio := Portfolio new.
	
	self cuentaConDepositoDeValor: transactionValue verifica: [
		:cuentaAAgregar :transaccionAgregada |
		primerPortfolioAAgregar add: cuentaAAgregar . 
		aCondition value: primerPortfolioAAgregar value: transaccionAgregada 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 12:33:45' prior: 50609306!
portfolioConDepositoDeValor: transactionValue verifica: aCondition
	
	| portfolio |
	portfolio := Portfolio new.
	
	self cuentaConDepositoDeValor: transactionValue verifica: [
		:cuentaAAgregar :transaccionAgregada |
		portfolio add: cuentaAAgregar . 
		aCondition value: portfolio value: transaccionAgregada 
	]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 12:33:49'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 12:33:49'!
PASSED!

----SNAPSHOT----(21 May 2023 12:34:07) CuisUniversity-5706.image priorSource: 8869219!

----SNAPSHOT----(21 May 2023 12:37:09) CuisUniversity-5706.image priorSource: 8887308!

----STARTUP---- (21 May 2023 20:03:34) as /home/antonio/Ingenieria de Software I/Cuis University/Portfolio1/linux64/CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:10:23' prior: 50608997!
test04PortfolioConDosPortfoliosTieneElMismoBalance
	| portfolio |
	portfolio:= Portfolio new. 
	self portfolioConDepositoDeValor: 5 verifica: [
		:portfolioConDeposito :depositoAgregado | 
		portfolio add: portfolioConDeposito. 
		
		].
	self portfolioConDepositoDeValor: 3 verifica: [
		:portfolioConDeposito :depositoAgregado | 
		portfolio add: portfolioConDeposito. 
		]. 
	
	self assert: 8 equals: portfolio balance  
	! !

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:10:27'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:10:27'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:14:45'!
portfolioConDepositoDeValor

	^ Portfolio new add: (self cuentaConUnDeposito: 5)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:14:45' prior: 50608927!
test02PortfolioConUnaCuentaTieneElMismoBalance
	self assert: 5 equals: (self portfolioConDepositoDeValor ) balance! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:15:17'!
portfolioConDepositoDeValor: depositValue

	^ Portfolio new add: (self cuentaConUnDeposito: 5)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 20:15:17' prior: 50609461!
test02PortfolioConUnaCuentaTieneElMismoBalance
	self assert: 5 equals: (self portfolioConDepositoDeValor: 5 ) balance! !

!methodRemoval: PortfolioTest #portfolioConDepositoDeValor stamp: 'a 5/21/2023 20:15:17'!
portfolioConDepositoDeValor

	^ Portfolio new add: (self cuentaConUnDeposito: 5)!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:15:42' prior: 50609467!
portfolioConDepositoDeValor: depositValue

	^ Portfolio new add: (self cuentaConUnDeposito: depositValue )! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:17:10' prior: 50609486!
portfolioConDepositoDeValor: depositValue

	self portfolioConDepositoDeValor: depositValue verifica:[:unPortfolio :depositoAgregado | ^unPortfolio ]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:17:29'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:17:33' prior: 50609321!
portfolioConDepositoDeValor: transactionValue verifica: aCondition
	
	| portfolio |
	portfolio := Portfolio new.
	
	self cuentaConDepositoDeValor: transactionValue verifica: [
		:cuentaAAgregar :transaccionAgregada |
		portfolio add: cuentaAAgregar . 
		^aCondition value: portfolio value: transaccionAgregada 
	]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:17:34'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:17:34'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:17:36' prior: 50609546!
portfolioConDepositoDeValor: transactionValue verifica: aCondition
	
	| portfolio |
	portfolio := Portfolio new.
	
	self cuentaConDepositoDeValor: transactionValue verifica: [
		:cuentaAAgregar :transaccionAgregada |
		portfolio add: cuentaAAgregar . 
		aCondition value: portfolio value: transaccionAgregada 
	]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:17:37'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:17:37'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:18:52' prior: 50608934!
test03PortfolioConDosCuentasTieneElMismoBalance
	| portfolio nuevaCuentaAAgregar |

	portfolio:=self portfolioConDepositoDeValor: 5. 
	
	nuevaCuentaAAgregar := self cuentaConUnDeposito: 3.
	
	portfolio add: nuevaCuentaAAgregar.
	
	self assert: 8 equals: portfolio balance! !

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:18:55'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:18:55'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:20:36' prior: 50609390!
test04PortfolioConDosPortfoliosTieneElMismoBalance
	| portfolio |
	portfolio := Portfolio new. 
	portfolio add: (self portfolioConDepositoDeValor: 5) .
	portfolio add: (self portfolioConDepositoDeValor: 3).
	
	self assert: 8 equals: portfolio balance  
	! !

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:20:37'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:20:58' prior: 50608817!
test05PortfolioVacioNoTieneAUnaTransaccion
	| transaccionAVerificar |
	transaccionAVerificar := Deposit for: 5.
	
	self deny: (Portfolio new hasRegistered: transaccionAVerificar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:21:07' prior: 50609785!
test05PortfolioVacioNoTieneAUnaTransaccion
	self deny: (Portfolio new hasRegistered: Deposit for: 5)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:21:26' prior: 50609794!
test05PortfolioVacioNoTieneAUnaTransaccion
	self deny: (Portfolio new hasRegistered: (Deposit for: 5))! !

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:21:26'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:21:26'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:22:16' prior: 50609084!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	
	self portfolioConDepositoDeValor: 5 verifica:[ 
		:portfolio :depositoAgregado |
		self assert: (portfolio hasRegistered: depositoAgregado)
		]! !

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:22:16'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:25:28' prior: 50609162!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| portfolio |
	portfolio:= Portfolio new. 
	portfolio add: ReceptiveAccount new.
	
	self cuentaConDepositoDeValor: 5 verifica: [
	:segundaCuentaAAgregar :transaccionAgregada | 
		portfolio add: segundaCuentaAAgregar .
		self assert: (portfolio hasRegistered: transaccionAgregada )
	]! !

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:25:31'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:25:31'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:26:09' prior: 50608511!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| segundoPortfolioAAgregar cuentaAAgregar portfolio depositoAAgregar|
	
	segundoPortfolioAAgregar := Portfolio new.
	
	cuentaAAgregar := ReceptiveAccount new. 
	depositoAAgregar:= Deposit for: 5.
	
	cuentaAAgregar register: depositoAAgregar .
	segundoPortfolioAAgregar add: cuentaAAgregar .
	
	portfolio := Portfolio new.
	portfolio add: Portfolio new .
	portfolio add: segundoPortfolioAAgregar .
	self assert: (portfolio hasRegistered: depositoAAgregar)! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:28:47' prior: 50609977!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| portfolio |
	
	self portfolioConDepositoDeValor: 5 verifica:[
		:portfolioAAgregar :transaccionAgregada |  
		portfolio := Portfolio new.
		portfolio add: Portfolio new .
		portfolio add: portfolioAAgregar.
		self assert: (portfolio hasRegistered: transaccionAgregada)
	]! !

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:28:51'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:28:51'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:29:16' prior: 50609997!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| portfolio |
	portfolio := Portfolio new.
	portfolio add: Portfolio new .
	
	self portfolioConDepositoDeValor: 5 verifica:[
		:portfolioAAgregar :transaccionAgregada |  	
		portfolio add: portfolioAAgregar.
		self assert: (portfolio hasRegistered: transaccionAgregada)
	]! !

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:29:17'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:29:17'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:29:49' prior: 50606986!
test09PortfolioVacioNoTieneTransacciones
	self assert: Portfolio new transactions isEmpty ! !

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:29:53'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:29:53'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:37:31'!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: 5. 
	segundaTransaccionAAgregar := Withdraw for: 5.
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio add: cuentaAAgregar . 
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:38:11' prior: 50610178!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: depositValue . 
	segundaTransaccionAAgregar := Withdraw for: withdrawValue .
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio add: cuentaAAgregar . 
	aCondition value: portfolio value: depositValue value: withdrawValue 
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:39:15' prior: 50608579!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones

	| primeraTransaccionAAgregar transaccionesCuenta |
	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica:[ 
		:portfolio :primeraTransaccion :segundaTransaccion|
		transaccionesCuenta:= OrderedCollection with: primeraTransaccionAAgregar with: segundaTransaccion . 
	
		self assert:transaccionesCuenta equals: portfolio transactions.
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:39:31' prior: 50610219!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones

	| transaccionesCuenta |
	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica:[ 
		:portfolio :primeraTransaccion :segundaTransaccion|
		transaccionesCuenta:= OrderedCollection with: primeraTransaccion with: segundaTransaccion . 
	
		self assert:transaccionesCuenta equals: portfolio transactions.
	]! !

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:39:34'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:39:55' prior: 50610197!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio cuentaAAgregar primeraTransaccionAAgregar segundaTransaccionAAgregar |
	
	portfolio := Portfolio new.
	cuentaAAgregar:= ReceptiveAccount new. 
	primeraTransaccionAAgregar := Deposit for: depositValue . 
	segundaTransaccionAAgregar := Withdraw for: withdrawValue .
	
	cuentaAAgregar register: primeraTransaccionAAgregar . 
	cuentaAAgregar register: segundaTransaccionAAgregar . 
	
	portfolio add: cuentaAAgregar . 
	aCondition value: portfolio value: primeraTransaccionAAgregar value: segundaTransaccionAAgregar 
	! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:39:56'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:39:56'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:41:53' prior: 50610255!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio segundaTransaccionAAgregar |
	
	portfolio := Portfolio new.
	self cuentaConDepositoDeValor: depositValue verifica: [
		:cuenta :deposito |
		 
		segundaTransaccionAAgregar := Withdraw for: withdrawValue .
		cuenta register: segundaTransaccionAAgregar . 
	
		portfolio add: cuenta . 
		aCondition value: portfolio value: deposito value: segundaTransaccionAAgregar 
	]
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:42:21' prior: 50610323!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio segundaTransaccionAAgregar extraccionAAgregar |
	
	portfolio := Portfolio new.
	self cuentaConDepositoDeValor: depositValue verifica: [
		:cuenta :deposito |
		 
		segundaTransaccionAAgregar := Withdraw for: withdrawValue .
		cuenta register: extraccionAAgregar. 
	
		portfolio add: cuenta . 
		aCondition value: portfolio value: deposito value: extraccionAAgregar
	]
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:42:34' prior: 50610341!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio extraccionAAgregar |
	
	portfolio := Portfolio new.
	self cuentaConDepositoDeValor: depositValue verifica: [
		:cuenta :deposito |
		 
		extraccionAAgregar := Withdraw for: withdrawValue .
		cuenta register: extraccionAAgregar. 
	
		portfolio add: cuenta . 
		aCondition value: portfolio value: deposito value: extraccionAAgregar
	]
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:47:23' prior: 50608543!
test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones

	| transaccionesCuenta |
	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica: 			[
		:portfolio :deposito :extraccion | 	
		
		self cuentaConDepositoDeValor: 7 verifica: [
			:segundaCuenta :segundoDeposito | 
			portfolio add: segundaCuenta . 
	
		    	transaccionesCuenta:= OrderedCollection with: deposito with: extraccion with: segundoDeposito. 

		    	self assert:transaccionesCuenta equals: portfolio transactions.
			].
	]! !

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:47:25'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:47:25'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:52:58' prior: 50608450!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones

    	| portfolio transacciones transaccionesCuenta |
	portfolio := Portfolio new.
	transacciones:= OrderedCollection new. 
    	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica: [
		:primerPortfolio :deposito :extraccion | 
		portfolio add: primerPortfolio . 
		transacciones add: deposito. 
		transacciones add: extraccion. 
	].
	  self portfolioConDepositoDeValor: 7 verifica: [
		:segundoPortfolio :deposito | 
		portfolio add: segundoPortfolio . 
		transacciones add: deposito. 
	].

    	self assert:transaccionesCuenta equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 20:53:08' prior: 50610445!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones

    	| portfolio transacciones |
	portfolio := Portfolio new.
	transacciones:= OrderedCollection new. 
    	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica: [
		:primerPortfolio :deposito :extraccion | 
		portfolio add: primerPortfolio . 
		transacciones add: deposito. 
		transacciones add: extraccion. 
	].
	  self portfolioConDepositoDeValor: 7 verifica: [
		:segundoPortfolio :deposito | 
		portfolio add: segundoPortfolio . 
		transacciones add: deposito. 
	].

    	self assert:transacciones equals: portfolio transactions.! !

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 20:53:09'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 20:53:09'!
PASSED!

----SNAPSHOT----(21 May 2023 20:59:02) CuisUniversity-5706.image priorSource: 8887396!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:06:37'!
test13PortfolioConUnaCuentaNoPermiteRepetidos 
	| cuenta porfolio portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta. 
	
	self should: [porfolio add:cuenta] raise: Error withMessageText: 'No se puede agregar una cuenta ya agregada'! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:06:53' prior: 50610543!
test13PortfolioConUnaCuentaNoPermiteRepetidos 
	| cuenta portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta. 
	
	self should: [portfolio add:cuenta] raise: Error withMessageText: 'No se puede agregar una cuenta ya agregada'! !

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:06:55'!
FAILURE!
!Portfolio class methodsFor: 'no messages' stamp: 'a 5/21/2023 21:08:45'!
accountIsAlreadyAddedErrorDescription 
	^'No se puede agregar una cuenta ya agregada'! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:09:45' prior: 50610555!
test13PortfolioConUnaCuentaNoPermiteRepetidos 
	| cuenta portfolio |
	portfolio:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta. 
	
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 21:11:15' prior: 50608788!
add: unRegistro 
	(registros includes: unRegistro) ifTrue:[self error: 	self class accountIsAlreadyAddedErrorDescription ].
	registros add: unRegistro! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:11:16'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:12:35'!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:12:37'!
FAILURE!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 21:18:56' prior: 50610588!
add: unRegistro 
	(registros includes: unRegistro) ifTrue:[self error: 	self class accountIsAlreadyAddedErrorDescription ].
	registros do: [:registroIterante | 
		registroIterante tryAdding: unRegistro
	]. 
	registros add: unRegistro! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:18:58'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 21:18:58'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:18:58'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 21:18:58'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 21:18:58'!
ERROR!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 21:18:58'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:18:58'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:18:58'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:19:00'!
ERROR!
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/21/2023 21:20:09'!
tryAdding: unRegistro 
	self shouldBeImplemented.! !
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/21/2023 21:20:18' prior: 50610728!
tryAdding: unRegistro 
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:20:20'!
ERROR!
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/21/2023 21:21:19'!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 21:21:19' prior: 50610662!
add: unRegistro 
	(registros includes: unRegistro) ifTrue:[self error: 	self class accountIsAlreadyAddedErrorDescription ].
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro
	]. 
	registros add: unRegistro! !

!methodRemoval: PersonalRegister #tryAdding: stamp: 'a 5/21/2023 21:21:19'!
tryAdding: unRegistro 
	self subclassResponsibility !
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 21:21:22' overrides: 50610741!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/21/2023 21:21:22' overrides: 50610741!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility ! !

!methodRemoval: PersonalRegister #assertRegisterIsNotIncluded: stamp: 'a 5/21/2023 21:21:22'!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility !
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/21/2023 21:21:44'!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/21/2023 21:22:05' prior: 50610768 overrides: 50610778!
assertRegisterIsNotIncluded: unRegistro 
	^self = unRegistro ! !
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/21/2023 21:23:44'!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	self subclassResponsibility ! !
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 21:23:44' overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/21/2023 21:23:44' overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	^self = unRegistro ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 21:23:44' prior: 50610747!
add: unRegistro 
	(registros includes: unRegistro) ifTrue:[self error: 	self class accountIsAlreadyAddedErrorDescription ].
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio
	]. 
	registros add: unRegistro! !

!methodRemoval: PersonalRegister #assertRegisterIsNotIncluded: stamp: 'a 5/21/2023 21:23:44'!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility !

!methodRemoval: Portfolio #assertRegisterIsNotIncluded: stamp: 'a 5/21/2023 21:23:44'!
assertRegisterIsNotIncluded: unRegistro 
	self subclassResponsibility !

!methodRemoval: ReceptiveAccount #assertRegisterIsNotIncluded: stamp: 'a 5/21/2023 21:23:44'!
assertRegisterIsNotIncluded: unRegistro 
	^self = unRegistro !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 21:23:53' prior: 50610808!
add: unRegistro 
	(registros includes: unRegistro) ifTrue:[self error: 	self class accountIsAlreadyAddedErrorDescription ].
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	registros add: unRegistro! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/21/2023 21:24:42' prior: 50610802 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	self = unRegistro ifTrue: [portfolio hasAddedDuplicatedRegister]! !
!Portfolio methodsFor: 'nil' stamp: 'a 5/21/2023 21:25:16'!
hasAddedDuplicatedRegister 
	self error: self class accountIsAlreadyAddedErrorDescription . ! !
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 21:26:58' prior: 50610795 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	(registros includes: unRegistro) ifTrue: [portfolio hasAddedDuplicatedRegister ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/21/2023 21:27:05'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:27:08'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:29:48'!
test14PortfolioConPortfolioNietoNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:30:04' prior: 50610947!
test14PortfolioConPortfolioNietoNoPermiteRepetidos 
	| cuenta portfolio portfolioHijo |
	portfolioHijo:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioHijo add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioHijo.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:31:01' prior: 50610962!
test14PortfolioConPortfolioNietoNoPermiteRepetidos 
	| cuenta portfolio portfolioHijo portfolioNieto|
	portfolioHijo:=Portfolio new. 
	
	portfolioNieto:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	portfolioHijo add: portfolioNieto .
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioHijo.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test14PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 21:31:03'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 21:32:39' prior: 50610861 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	registros do: [:registroIterante| 
		registroIterante assertRegisterIsNotIncluded:unRegistro  forPortfolio: portfolio
	] ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:32:44'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:33:17'!
test15PortfolioConPortfolioNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!methodRemoval: PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:33:17'!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:34:35'!
test16PortfolioConPadreNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

----SNAPSHOT----(21 May 2023 21:34:39) CuisUniversity-5706.image priorSource: 8924459!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:35:32' prior: 50611091!
test16PortfolioConPadreNoPermiteRepetidos 
	| cuenta portfolioPadre portfolioHijo|
	portfolioPadre:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioPadre add: cuenta. 
	
	portfolioHijo:=Portfolio new. 
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 21:35:33'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:40:20'!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!methodRemoval: PortfolioTest #test15PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:40:20'!
test15PortfolioConPortfolioNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 21:40:27'!
test15PortfolioConPortfolioNietoNoPermiteRepetidos 
	| cuenta portfolio portfolioHijo portfolioNieto|
	portfolioHijo:=Portfolio new. 
	
	portfolioNieto:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	portfolioHijo add: portfolioNieto .
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioHijo.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!methodRemoval: PortfolioTest #test14PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 21:40:27'!
test14PortfolioConPortfolioNietoNoPermiteRepetidos 
	| cuenta portfolio portfolioHijo portfolioNieto|
	portfolioHijo:=Portfolio new. 
	
	portfolioNieto:=Portfolio new. 
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	portfolioHijo add: portfolioNieto .
	
	portfolio:=Portfolio new. 
	portfolio add: portfolioHijo.
	self should: [portfolio add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 21:41:57' prior: 50610835!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	registros add: unRegistro! !

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:02'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:04'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:04'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:09'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 21:42:09'!
FAILURE!

Object subclass: #PersonalRegister
	instanceVariableNames: 'padre'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PersonalRegister category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 21:53:39'!
Object subclass: #PersonalRegister
	instanceVariableNames: 'padre'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

cuenta1:=ReceptiveAccount new. 
cuenta2:=ReceptiveAccount new. 
cuenta1 = cuenta2!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 21:58:30' prior: 50611189!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	padre assertRegisterIsNotIncluded: unRegistro exceptFor: self forPortfolio: self.  
	registros add: unRegistro! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 21:58:43' prior: 50611286!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	padre assertRegisterIsNotIncluded: unRegistro excepting: self forPortfolio: self.  
	registros add: unRegistro! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 21:58:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 21:58:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 21:58:44'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 21:58:44'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 21:58:46'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:01:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:01:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:01:33'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:01:33'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:01:34'!
ERROR!
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 22:02:06' prior: 50611297!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	padre ifNotNil:[padre assertRegisterIsNotIncluded: unRegistro excepting: self forPortfolio: self.].  
	registros add: unRegistro! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:02:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:02:09'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:02:09'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 22:05:40'!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio
	registros do: [:registroIterante| 
		registroIterante ~= aRegisterToExcept ifTrue: [registroIterante assertRegisterIsNotIncluded:unRegistro  forPortfolio: aPortfolio]
	] ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:05:42'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:05:42'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:05:42'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:06:08'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:06:08'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:06:08'!
FAILURE!
!PersonalRegister methodsFor: 'nil' stamp: 'a 5/21/2023 22:07:49'!
hasBeenAddedToPortfolio: aPortfolio 
	padre:=aPortfolio ! !
!Portfolio methodsFor: 'modifying' stamp: 'a 5/21/2023 22:08:34' prior: 50611433!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	padre ifNotNil:[padre assertRegisterIsNotIncluded: unRegistro excepting: self forPortfolio: self.].  
	registros add: unRegistro.
	unRegistro hasBeenAddedToPortfolio: self. ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/21/2023 22:08:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:08:53'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:08:53'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:08:53'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:09:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:09:52'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:09:52'!
FAILURE!

padre!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 22:11:26' prior: 50611108!
test16PortfolioConPadreNoPermiteRepetidos 
	| cuenta portfolioPadre portfolioHijo|
	portfolioPadre:=Portfolio new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioPadre add: cuenta. 
	
	portfolioHijo:=Portfolio new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:11:27'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:11:27'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 22:13:41'!
test17PortfolioConAbueloNoPermiteRepetidos 
	| cuenta portfolioPadre portfolioHijo portfolioAbuelo |
	portfolioAbuelo:=Portfolio new. 

	portfolioPadre:=Portfolio new. 
	portfolioAbuelo add: portfolioPadre .	
	
	cuenta:=ReceptiveAccount new. 
	portfolioAbuelo add: cuenta. 
	
	portfolioHijo:=Portfolio new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: Portfolio accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:13:44'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 22:14:33' prior: 50611507!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio
	registros do: [:registroIterante| 
		registroIterante ~= aRegisterToExcept ifTrue: [registroIterante assertRegisterIsNotIncluded:unRegistro  forPortfolio: aPortfolio]
	]. 
	padre assertRegisterIsNotIncluded: unRegistro excepting: self  forPortfolio: aPortfolio ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:35'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:35'!
ERROR!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:35'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:42'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:42'!
ERROR!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:14:42'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 22:15:00' prior: 50611912!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio
	registros do: [:registroIterante| 
		registroIterante ~= aRegisterToExcept ifTrue: [registroIterante assertRegisterIsNotIncluded:unRegistro  forPortfolio: aPortfolio]
	]. 
	padre ifNotNil:[ padre assertRegisterIsNotIncluded: unRegistro excepting: self  forPortfolio: aPortfolio ]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:01'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:01'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'a 5/21/2023 22:15:23' prior: 50612059!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio
	registros do: [:registroIterante| 
		registroIterante = aRegisterToExcept ifFalse: [registroIterante assertRegisterIsNotIncluded:unRegistro  forPortfolio: aPortfolio]
	]. 
	padre ifNotNil:[ padre assertRegisterIsNotIncluded: unRegistro excepting: self  forPortfolio: aPortfolio ]! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:24'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:15:24'!
PASSED!

PersonalRegister subclass: #PortfolioPadre
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioPadre category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 22:23:46'!
PersonalRegister subclass: #PortfolioPadre
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioPadre subclass: #Portfolio
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 22:24:01'!
PortfolioPadre subclass: #Portfolio
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #Portfolio as: #PortfolioExistente stamp: 'a 5/21/2023 22:26:27'!
Smalltalk renameClassNamed: #Portfolio as: #PortfolioExistente!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50605278!
test01PortfolioNuevoTieneBalanceCero
	self assert: 0 equals: PortfolioExistente new balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50610576!
test13PortfolioConUnaCuentaNoPermiteRepetidos 
	| cuenta portfolio |
	portfolio:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta. 
	
	self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50611154!
test15PortfolioConPortfolioNietoNoPermiteRepetidos 
	| cuenta portfolio portfolioHijo portfolioNieto|
	portfolioHijo:=PortfolioExistente new. 
	
	portfolioNieto:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	portfolioHijo add: portfolioNieto .
	
	portfolio:=PortfolioExistente new. 
	portfolio add: portfolioHijo.
	self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50611125!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=PortfolioExistente new. 
	portfolio add: portfolioAAgregar.
	self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50610124!
test09PortfolioVacioNoTieneTransacciones
	self assert: PortfolioExistente new transactions isEmpty ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50611891!
test17PortfolioConAbueloNoPermiteRepetidos 
	| cuenta portfolioPadre portfolioHijo portfolioAbuelo |
	portfolioAbuelo:=PortfolioExistente new. 

	portfolioPadre:=PortfolioExistente new. 
	portfolioAbuelo add: portfolioPadre .	
	
	cuenta:=ReceptiveAccount new. 
	portfolioAbuelo add: cuenta. 
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50610061!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| portfolio |
	portfolio := PortfolioExistente new.
	portfolio add: PortfolioExistente new .
	
	self portfolioConDepositoDeValor: 5 verifica:[
		:portfolioAAgregar :transaccionAgregada |  	
		portfolio add: portfolioAAgregar.
		self assert: (portfolio hasRegistered: transaccionAgregada)
	]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50609725!
test04PortfolioConDosPortfoliosTieneElMismoBalance
	| portfolio |
	portfolio := PortfolioExistente new. 
	portfolio add: (self portfolioConDepositoDeValor: 5) .
	portfolio add: (self portfolioConDepositoDeValor: 3).
	
	self assert: 8 equals: portfolio balance  
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50610468!
test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones

    	| portfolio transacciones |
	portfolio := PortfolioExistente new.
	transacciones:= OrderedCollection new. 
    	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica: [
		:primerPortfolio :deposito :extraccion | 
		portfolio add: primerPortfolio . 
		transacciones add: deposito. 
		transacciones add: extraccion. 
	].
	  self portfolioConDepositoDeValor: 7 verifica: [
		:segundoPortfolio :deposito | 
		portfolio add: segundoPortfolio . 
		transacciones add: deposito. 
	].

    	self assert:transacciones equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50609605!
portfolioConDepositoDeValor: transactionValue verifica: aCondition
	
	| portfolio |
	portfolio := PortfolioExistente new.
	
	self cuentaConDepositoDeValor: transactionValue verifica: [
		:cuentaAAgregar :transaccionAgregada |
		portfolio add: cuentaAAgregar . 
		aCondition value: portfolio value: transaccionAgregada 
	]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50610359!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: aCondition
	| portfolio extraccionAAgregar |
	
	portfolio := PortfolioExistente new.
	self cuentaConDepositoDeValor: depositValue verifica: [
		:cuenta :deposito |
		 
		extraccionAAgregar := Withdraw for: withdrawValue .
		cuenta register: extraccionAAgregar. 
	
		portfolio add: cuenta . 
		aCondition value: portfolio value: deposito value: extraccionAAgregar
	]
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50609800!
test05PortfolioVacioNoTieneAUnaTransaccion
	self deny: (PortfolioExistente new hasRegistered: (Deposit for: 5))! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50609914!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| portfolio |
	portfolio:= PortfolioExistente new. 
	portfolio add: ReceptiveAccount new.
	
	self cuentaConDepositoDeValor: 5 verifica: [
	:segundaCuentaAAgregar :transaccionAgregada | 
		portfolio add: segundaCuentaAAgregar .
		self assert: (portfolio hasRegistered: transaccionAgregada )
	]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:26:27' prior: 50611814!
test16PortfolioConPadreNoPermiteRepetidos 
	| cuenta portfolioPadre portfolioHijo|
	portfolioPadre:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioPadre add: cuenta. 
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !

PersonalRegister subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 22:28:20'!
PersonalRegister subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #PortfolioExistente
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioExistente category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 22:28:26'!
Portfolio subclass: #PortfolioExistente
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioPadre stamp: 'a 5/21/2023 22:28:30'!
PersonalRegister subclass: #PortfolioPadre
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #PortfolioInexistente
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioInexistente category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 22:28:39'!
Portfolio subclass: #PortfolioInexistente
	instanceVariableNames: 'registros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #PortfolioInexistente
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioInexistente category: 'Portfolio-Ejercicio' stamp: 'a 5/21/2023 22:28:43'!
Portfolio subclass: #PortfolioInexistente
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(21 May 2023 22:31:17) CuisUniversity-5706.image priorSource: 8942545!
!Portfolio methodsFor: 'no messages' stamp: 'a 5/21/2023 22:32:22'!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio
	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:32:34'!
add: unRegistro 
	self subclassResponsibility ! !
!Portfolio methodsFor: 'error handling' stamp: 'a 5/21/2023 22:33:16'!
hasAddedDuplicatedRegister 
	self error: self class accountIsAlreadyAddedErrorDescription . ! !

!methodRemoval: PortfolioExistente #hasAddedDuplicatedRegister stamp: 'a 5/21/2023 22:33:16'!
hasAddedDuplicatedRegister 
	self error: self class accountIsAlreadyAddedErrorDescription . !
!Portfolio class methodsFor: 'errors' stamp: 'a 5/21/2023 22:33:46'!
accountIsAlreadyAddedErrorDescription 
	^'No se puede agregar una cuenta ya agregada'! !

!methodRemoval: PortfolioExistente class #accountIsAlreadyAddedErrorDescription stamp: 'a 5/21/2023 22:33:46'!
accountIsAlreadyAddedErrorDescription 
	^'No se puede agregar una cuenta ya agregada'!
!PortfolioInexistente methodsFor: 'nil' stamp: 'a 5/21/2023 22:34:51' overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	! !
!PortfolioInexistente methodsFor: 'nil' stamp: 'a 5/21/2023 22:35:20' overrides: 50608290!
balance
	^0! !
!PortfolioInexistente methodsFor: 'nil' stamp: 'a 5/21/2023 22:35:37' overrides: 50611644!
hasBeenAddedToPortfolio: aPortfolio 
! !
!PortfolioInexistente methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:35:53' overrides: 50608285!
hasRegistered: aTransaction 
	^false 
! !
!PortfolioInexistente methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:36:09' prior: 50612554 overrides: 50608285!
hasRegistered: aTransaction 
	^OrderedCollection new 
! !
!PortfolioInexistente methodsFor: 'accessing' stamp: 'a 5/21/2023 22:37:02' overrides: 50608295!
transactions
	^OrderedCollection new 
! !
!PortfolioInexistente methodsFor: 'accessing' stamp: 'a 5/21/2023 22:37:08' prior: 50612560 overrides: 50608285!
hasRegistered: aTransaction 
	^false
! !
!PortfolioInexistente methodsFor: 'nil' stamp: 'a 5/21/2023 22:37:27' overrides: 50612511!
add: unRegistro 
	self subclassResponsibility ! !
!PortfolioInexistente methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:37:30' prior: 50612575 overrides: 50612511!
add: unRegistro 
	 ! !
!PortfolioInexistente methodsFor: 'as yet unclassified' stamp: 'a 5/21/2023 22:37:40' overrides: 50612504!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio

	 ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/21/2023 22:38:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:38:10'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:38:10'!
PASSED!
!PortfolioExistente methodsFor: 'initialization' stamp: 'a 5/21/2023 22:38:37' prior: 50608768 overrides: 16920235!
initialize

	registros := OrderedCollection new.
	padre:=PortfolioInexistente new! !
!PortfolioExistente methodsFor: 'modifying' stamp: 'a 5/21/2023 22:38:55' prior: 50611649 overrides: 50612511!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	padre assertRegisterIsNotIncluded: unRegistro excepting: self forPortfolio: self.
	registros add: unRegistro.
	unRegistro hasBeenAddedToPortfolio: self. ! !
!PortfolioExistente methodsFor: 'assertions' stamp: 'a 5/21/2023 22:39:07' prior: 50612137 overrides: 50612504!
assertRegisterIsNotIncluded: unRegistro excepting: aRegisterToExcept forPortfolio: aPortfolio
	registros do: [:registroIterante| 
		registroIterante = aRegisterToExcept ifFalse: [registroIterante assertRegisterIsNotIncluded:unRegistro  forPortfolio: aPortfolio]
	]. 
	padre assertRegisterIsNotIncluded: unRegistro excepting: self  forPortfolio: aPortfolio! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/21/2023 22:39:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/21/2023 22:39:13'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/21/2023 22:39:13'!
PASSED!

----SNAPSHOT----(21 May 2023 22:39:45) CuisUniversity-5706.image priorSource: 8987228!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/21/2023 22:40:44'!
test18xxx 
	| cuenta portfolio portfolioAAgregar |
	portfolioAAgregar:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioAAgregar add: cuenta. 
	
	portfolio:=PortfolioExistente new. 
	portfolio add:cuenta.
	self should: [portfolio add:portfolioAAgregar] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test18xxx stamp: 'a 5/21/2023 22:40:44'!
FAILURE!

----SNAPSHOT----(21 May 2023 22:42:00) CuisUniversity-5706.image priorSource: 8996935!

----STARTUP---- (22 May 2023 11:41:01) as /home/antonio/Ingenieria de Software I/Cuis University/Portfolio1/linux64/CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 11:43:35' prior: 50612808!
test18xxx 
	| cuenta portfolio portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioHijo add: cuenta. 
	
	portfolio:=PortfolioExistente new. 
	portfolio add:cuenta.
	self should: [portfolio add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test18xxx stamp: 'a 5/22/2023 11:43:52'!
FAILURE!
!PortfolioExistente methodsFor: 'modifying' stamp: 'a 5/22/2023 11:51:09' prior: 50612689 overrides: 50612511!
add: unRegistro 
	registros do: [:registroIterante | 
		 unRegistro assertRegisterIsNotIncluded: registroIterante forPortfolio: self
	]. 
	padre assertRegisterIsNotIncluded: unRegistro excepting: self forPortfolio: self.
	registros add: unRegistro.
	unRegistro hasBeenAddedToPortfolio: self. ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 11:51:10'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 11:51:10'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 11:51:10'!
PASSED!

!testRun: #PortfolioTest #test18xxx stamp: 'a 5/22/2023 11:51:10'!
PASSED!
!PortfolioExistente methodsFor: 'modifying' stamp: 'a 5/22/2023 11:51:22' prior: 50612849 overrides: 50612511!
add: unRegistro 
	registros do: [:registroIterante | 
		registroIterante assertRegisterIsNotIncluded: unRegistro forPortfolio: self
	]. 
	padre assertRegisterIsNotIncluded: unRegistro excepting: self forPortfolio: self.
	registros add: unRegistro.
	unRegistro hasBeenAddedToPortfolio: self. ! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/22/2023 11:52:53' prior: 50610847 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	unRegistro isKindOf: Portfolio ifTrue: [unRegistro assertRegisterIsNotIncluded: self forPortfolio: portfolio ].
	self = unRegistro ifTrue: [portfolio hasAddedDuplicatedRegister]! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/22/2023 11:53:02' prior: 50612941 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	(unRegistro isKindOf: Portfolio) ifTrue: [unRegistro assertRegisterIsNotIncluded: self forPortfolio: portfolio ].
	self = unRegistro ifTrue: [portfolio hasAddedDuplicatedRegister]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/22/2023 11:53:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 11:53:05'!
PASSED!

!testRun: #PortfolioTest #test18xxx stamp: 'a 5/22/2023 11:53:05'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 11:53:40'!
test18PortfolioConCuentaNoPermiteRepetidosEnHijo 
	| cuenta portfolio portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioHijo add: cuenta. 
	
	portfolio:=PortfolioExistente new. 
	portfolio add:cuenta.
	self should: [portfolio add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !

!methodRemoval: PortfolioTest #test18xxx stamp: 'a 5/22/2023 11:53:40'!
test18xxx 
	| cuenta portfolio portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioHijo add: cuenta. 
	
	portfolio:=PortfolioExistente new. 
	portfolio add:cuenta.
	self should: [portfolio add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 11:56:35'!
test19PortfolioConCuentaNoPermiteRepetidosEnNieto 
	| cuenta portfolioPadre portfolioNieto portfolioHijo |
	portfolioNieto:=PortfolioExistente new. 
	
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add:cuenta.
	
	portfolioHijo := PortfolioExistente new. 
	portfolioHijo add: portfolioNieto .
	self should: [portfolioPadre add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 11:56:54' prior: 50613083!
test19PortfolioConCuentaNoPermiteRepetidosEnNieto 
	| cuenta portfolioPadre portfolioNieto portfolioHijo |
	portfolioNieto:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add:cuenta.
	
	portfolioHijo := PortfolioExistente new. 
	portfolioHijo add: portfolioNieto .
	
	self should: [portfolioPadre add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPermiteRepetidosEnNieto stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioConCuentaNoPermiteRepetidosEnNieto stamp: 'a 5/22/2023 11:56:56'!
PASSED!

!methodRemoval: PortfolioTest #test19PortfolioConCuentaNoPermiteRepetidosEnNieto stamp: 'a 5/22/2023 11:58:15'!
test19PortfolioConCuentaNoPermiteRepetidosEnNieto 
	| cuenta portfolioPadre portfolioNieto portfolioHijo |
	portfolioNieto:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolioNieto add: cuenta. 
	
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add:cuenta.
	
	portfolioHijo := PortfolioExistente new. 
	portfolioHijo add: portfolioNieto .
	
	self should: [portfolioPadre add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/22/2023 12:01:29' prior: 50612953 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	unRegistro assertReceptiveAccountIsNotIncludedIn: self forPortfolio: portfolio. 
	"(unRegistro isKindOf: Portfolio) ifTrue: [unRegistro assertRegisterIsNotIncluded: self forPortfolio: portfolio ].
	self = unRegistro ifTrue: [portfolio hasAddedDuplicatedRegister]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/22/2023 12:01:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/22/2023 12:01:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:01:36'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:01:36'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:01:36'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:01:36'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:01:36'!
ERROR!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:01:36'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:01:38'!
ERROR!
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/22/2023 12:01:50'!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self shouldBeImplemented.! !
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/22/2023 12:02:51' prior: 50613350!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]! !

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:02:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:02:59'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:02:59'!
FAILURE!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:02:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/22/2023 12:03:41' overrides: 50613357!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]! !
!Portfolio methodsFor: 'assertions' stamp: 'a 5/22/2023 12:03:41' overrides: 50613357!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]! !

!methodRemoval: PersonalRegister #assertReceptiveAccountIsNotIncludedIn:forPortfolio: stamp: 'a 5/22/2023 12:03:41'!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]!
!PortfolioExistente methodsFor: 'assertions' stamp: 'a 5/22/2023 12:04:01' overrides: 50613447!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]! !
!PortfolioInexistente methodsFor: 'assertions' stamp: 'a 5/22/2023 12:04:01' overrides: 50613447!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]! !

!methodRemoval: Portfolio #assertReceptiveAccountIsNotIncludedIn:forPortfolio: stamp: 'a 5/22/2023 12:04:01'!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self = aReceptiveAccount ifTrue: [portfolio hasAddedDuplicatedRegister]!
!Portfolio methodsFor: 'nil' stamp: 'a 5/22/2023 12:04:32'!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self subclassResponsibility ! !

!methodRemoval: Portfolio #assertReceptiveAccountIsNotIncludedIn:forPortfolio: stamp: 'a 5/22/2023 12:05:01'!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self subclassResponsibility !
!PersonalRegister methodsFor: 'assertions' stamp: 'a 5/22/2023 12:05:31'!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self subclassResponsibility ! !
!PortfolioExistente methodsFor: 'assertions' stamp: 'a 5/22/2023 12:06:31' prior: 50613464 overrides: 50613501!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio 
	self assertRegisterIsNotIncluded: aReceptiveAccount forPortfolio: portfolio! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:33'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:06:33'!
PASSED!
!PortfolioInexistente methodsFor: 'assertions' stamp: 'a 5/22/2023 12:06:40' prior: 50613472 overrides: 50613501!
assertReceptiveAccountIsNotIncludedIn: aReceptiveAccount forPortfolio: portfolio ! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:44'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:06:44'!
PASSED!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'a 5/22/2023 12:06:54' prior: 50613215 overrides: 50610789!
assertRegisterIsNotIncluded: unRegistro forPortfolio: portfolio  
	unRegistro assertReceptiveAccountIsNotIncludedIn: self forPortfolio: portfolio. ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/22/2023 12:06:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:06:57'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:06:57'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:09:10'!
portfolioConCuentaVacia: aClosure
	| cuenta portfolio |
	portfolio:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta.
	
	aClosure value: portfolio value: cuenta 
	
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:09:25'!
portfolioConCuentaVaciaVerifica: aClosure
	| cuenta portfolio |
	portfolio:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta.
	
	aClosure value: portfolio value: cuenta 
	
	! !

!methodRemoval: PortfolioTest #portfolioConCuentaVacia: stamp: 'a 5/22/2023 12:09:25'!
portfolioConCuentaVacia: aClosure
	| cuenta portfolio |
	portfolio:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta.
	
	aClosure value: portfolio value: cuenta 
	
	!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:09:35' prior: 50613767!
portfolioConCuentaVaciaVerifica: aCondition
	| cuenta portfolio |
	portfolio:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta.
	
	aCondition value: portfolio value: cuenta 
	
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:09:47' prior: 50613786!
portfolioConCuentaVaciaVerifica: bloqueAVerificar
	| cuenta portfolio |
	portfolio:=PortfolioExistente new. 
	cuenta:=ReceptiveAccount new. 
	portfolio add: cuenta.
	
	bloqueAVerificar value: portfolio value: cuenta 
	
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:09:57' prior: 50612375!
portfolioConDepositoDeValor: transactionValue verifica: bloqueAVerificar
	
	| portfolio |
	portfolio := PortfolioExistente new.
	
	self cuentaConDepositoDeValor: transactionValue verifica: [
		:cuentaAAgregar :transaccionAgregada |
		portfolio add: cuentaAAgregar . 
		bloqueAVerificar value: portfolio value: transaccionAgregada 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:10:04' prior: 50612389!
portfolioConDepositoDeValor: depositValue yExtraccionDeValor: withdrawValue verifica: bloqueAVerificar
	| portfolio extraccionAAgregar |
	
	portfolio := PortfolioExistente new.
	self cuentaConDepositoDeValor: depositValue verifica: [
		:cuenta :deposito |
		 
		extraccionAAgregar := Withdraw for: withdrawValue .
		cuenta register: extraccionAAgregar. 
	
		portfolio add: cuenta . 
		bloqueAVerificar value: portfolio value: deposito value: extraccionAAgregar
	]
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:10:43' prior: 50612251!
test13PortfolioConUnaCuentaNoPermiteRepetidos 
	self portfolioConCuentaVaciaVerifica: [:portfolio :cuenta |
		self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]	
	! !

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:10:44'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:10:44'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:11:28' prior: 50612283!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| portfolio |
	self portfolioConCuentaVaciaVerifica: [:portfolioAAgregar :cuenta |
		portfolio:=PortfolioExistente new. 
		portfolio add: portfolioAAgregar.
		self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:11:31'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:11:31'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:11:44' prior: 50613919!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| portfolio |
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		portfolio:=PortfolioExistente new. 
		portfolio add: portfolioHijo.
		self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:12:24' prior: 50612264!
test15PortfolioConPortfolioNietoNoPermiteRepetidos 
	| portfolio portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	self portfolioConCuentaVaciaVerifica: [:portfolioNieto :cuenta | 
		portfolioHijo add: portfolioNieto .
	
		portfolio:=PortfolioExistente new. 
		portfolio add: portfolioHijo.
		self should: [portfolio add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:12:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:12:36'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:12:36'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:13:07' prior: 50612429!
test16PortfolioConPadreNoPermiteRepetidos 
	| portfolioHijo|
	self portfolioConCuentaVaciaVerifica: [:portfolioPadre :cuenta |
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:07'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:13:07'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:13:11' prior: 50614173!
test16PortfolioConPadreNoPermiteRepetidos 
	| portfolioHijo|
	
	self portfolioConCuentaVaciaVerifica: [:portfolioPadre :cuenta |
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:13:11'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:13:11'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:14:26' prior: 50612306!
test17PortfolioConAbueloNoPermiteRepetidos 
	|  portfolioPadre portfolioHijo |

	self portfolioConCuentaVaciaVerifica: [:portfolioAbuelo :cuenta |
		portfolioPadre:=PortfolioExistente new. 
		portfolioAbuelo add: portfolioPadre .	
	
		portfolioHijo:=PortfolioExistente new. 
		portfolioPadre add: portfolioHijo .
	
		self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:28'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:14:28'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:14:58' prior: 50613055!
test18PortfolioConCuentaNoPermiteRepetidosEnHijo 
	|  portfolio |
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		portfolio:=PortfolioExistente new. 
		portfolio add:cuenta.
		self should: [portfolio add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:14:59'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:14:59'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:16:12' prior: 50614016!
test15PortfolioConPortfolioNietoNoPermiteRepetidos 
	| portfolioPadre portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	self portfolioConCuentaVaciaVerifica: [:portfolioNieto :cuenta | 
		portfolioHijo add: portfolioNieto .
	
		portfolioPadre:=PortfolioExistente new. 
		portfolioPadre add: portfolioHijo.
		self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:16:22' prior: 50614003!
test14PortfolioConPortfolioNoPermiteRepetidos 
	| portfolioPadre |
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		portfolioPadre:=PortfolioExistente new. 
		portfolioPadre add: portfolioHijo.
		self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:16:48' prior: 50614428!
test18PortfolioConCuentaNoPermiteRepetidosEnHijo 
	|  portfolioPadre |
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		portfolioPadre:=PortfolioExistente new. 
		portfolioPadre add:cuenta.
		self should: [portfolioPadre add:portfolioHijo] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:21:12'!
shouldPortfolioPadreWithChild: portfolioHijo ThrowErrorWhenAdding: cuenta 
	| portfolioPadre |
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo.
	self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:21:35' prior: 50614529!
test14PortfolioConPortfolioNoPermiteRepetidos 
	
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		self shouldPortfolioPadreWithChild: portfolioHijo ThrowErrorWhenAdding: cuenta
	]! !

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:21:37'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:21:37'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:21:48' prior: 50614570!
test14PortfolioConPortfolioNoPermiteRepetidos 
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		self shouldPortfolioPadreWithChild: portfolioHijo ThrowErrorWhenAdding: cuenta
	]! !
!PortfolioTest methodsFor: 'constants' stamp: 'a 5/22/2023 12:21:56'!
shouldPortfolioPadreWithChild: portfolioHijo throwErrorWhenAdding: cuenta 
	| portfolioPadre |
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo.
	self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/22/2023 12:21:56' prior: 50614649!
test14PortfolioConPortfolioNoPermiteRepetidos 
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		self shouldPortfolioPadreWithChild: portfolioHijo throwErrorWhenAdding: cuenta
	]! !

!methodRemoval: PortfolioTest #shouldPortfolioPadreWithChild:ThrowErrorWhenAdding: stamp: 'a 5/22/2023 12:21:56'!
shouldPortfolioPadreWithChild: portfolioHijo ThrowErrorWhenAdding: cuenta 
	| portfolioPadre |
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo.
	self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:22:16' prior: 50614512!
test15PortfolioConPortfolioNietoNoPermiteRepetidos 
	| portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	self portfolioConCuentaVaciaVerifica: [:portfolioNieto :cuenta | 
		portfolioHijo add: portfolioNieto .
		self shouldPortfolioPadreWithChild: portfolioHijo throwErrorWhenAdding: cuenta 
	]! !

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:22:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:22:23'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:22:23'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:25:41'!
xxx:portfolioPadre yyy:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:26:08'!
shouldPortfolioWithFather:portfolioPadre throwErrorWhenAdding:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

! !

!methodRemoval: PortfolioTest #xxx:yyy: stamp: 'a 5/22/2023 12:26:08'!
xxx:portfolioPadre yyy:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

!
!PortfolioTest methodsFor: 'constants' stamp: 'a 5/22/2023 12:27:18'!
shouldPortfolioChildWithParent:portfolioPadre throwErrorWhenAdding:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

! !

!methodRemoval: PortfolioTest #shouldPortfolioWithFather:throwErrorWhenAdding: stamp: 'a 5/22/2023 12:27:18'!
shouldPortfolioWithFather:portfolioPadre throwErrorWhenAdding:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

!
!PortfolioTest methodsFor: 'constants' stamp: 'a 5/22/2023 12:27:31'!
shouldPortfolioWithChild: portfolioHijo throwErrorWhenAdding: cuenta 
	| portfolioPadre |
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo.
	self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/22/2023 12:27:31' prior: 50614671!
test14PortfolioConPortfolioNoPermiteRepetidos 
	self portfolioConCuentaVaciaVerifica: [:portfolioHijo :cuenta |
		self shouldPortfolioWithChild: portfolioHijo throwErrorWhenAdding: cuenta
	]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/22/2023 12:27:31' prior: 50614693!
test15PortfolioConPortfolioNietoNoPermiteRepetidos 
	| portfolioHijo |
	portfolioHijo:=PortfolioExistente new. 
	
	self portfolioConCuentaVaciaVerifica: [:portfolioNieto :cuenta | 
		portfolioHijo add: portfolioNieto .
		self shouldPortfolioWithChild: portfolioHijo throwErrorWhenAdding: cuenta 
	]! !

!methodRemoval: PortfolioTest #shouldPortfolioPadreWithChild:throwErrorWhenAdding: stamp: 'a 5/22/2023 12:27:31'!
shouldPortfolioPadreWithChild: portfolioHijo throwErrorWhenAdding: cuenta 
	| portfolioPadre |
	portfolioPadre:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo.
	self should: [portfolioPadre add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription !
!PortfolioTest methodsFor: 'constants' stamp: 'a 5/22/2023 12:27:52'!
shouldPortfolioWithParent:portfolioPadre throwErrorWhenAdding:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

! !

!methodRemoval: PortfolioTest #shouldPortfolioChildWithParent:throwErrorWhenAdding: stamp: 'a 5/22/2023 12:27:52'!
shouldPortfolioChildWithParent:portfolioPadre throwErrorWhenAdding:cuenta 
	| portfolioHijo|
	
	portfolioHijo:=PortfolioExistente new. 
	portfolioPadre add: portfolioHijo .
	self should: [portfolioHijo add:cuenta] raise: Error withMessageText: PortfolioExistente accountIsAlreadyAddedErrorDescription 

!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:28:37' prior: 50614257!
test16PortfolioConPadreNoPermiteRepetidos 
	
	
	self portfolioConCuentaVaciaVerifica: [:portfolioPadre :cuenta |
		self shouldPortfolioWithParent: portfolioPadre throwErrorWhenAdding:cuenta 
	]! !

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:28:42'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:28:42'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:28:45' prior: 50614979!
test16PortfolioConPadreNoPermiteRepetidos 
	self portfolioConCuentaVaciaVerifica: [:portfolioPadre :cuenta |
		self shouldPortfolioWithParent: portfolioPadre throwErrorWhenAdding:cuenta 
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:29:10' prior: 50614341!
test17PortfolioConAbueloNoPermiteRepetidos 
	|  portfolioPadre |

	self portfolioConCuentaVaciaVerifica: [:portfolioAbuelo :cuenta |
		portfolioPadre:=PortfolioExistente new. 
		portfolioAbuelo add: portfolioPadre .	
	
		self shouldPortfolioWithParent: portfolioPadre throwErrorWhenAdding: cuenta 
	]! !

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:29:16'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:29:16'!
PASSED!
!PortfolioTest methodsFor: 'constants' stamp: 'a 5/22/2023 12:30:30'!
cuentaConDepositoDeValor: valueOfTransaction
	| cuenta |
	cuenta := ReceptiveAccount new.
	cuenta register: (Deposit for: valueOfTransaction ).
	^cuenta! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'a 5/22/2023 12:30:30' prior: 50609664!
test03PortfolioConDosCuentasTieneElMismoBalance
	| portfolio nuevaCuentaAAgregar |

	portfolio:=self portfolioConDepositoDeValor: 5. 
	
	nuevaCuentaAAgregar := self cuentaConDepositoDeValor: 3.
	
	portfolio add: nuevaCuentaAAgregar.
	
	self assert: 8 equals: portfolio balance! !

!methodRemoval: PortfolioTest #cuentaConUnDeposito: stamp: 'a 5/22/2023 12:30:30'!
cuentaConUnDeposito: valueOfTransaction
	| cuenta |
	cuenta := ReceptiveAccount new.
	cuenta register: (Deposit for: valueOfTransaction ).
	^cuenta!
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:31:03' prior: 50609855!
test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta
	
	self portfolioConDepositoDeValor: 5 verifica:[ 
		:portfolio :depositoAgregado |
		self assert: (portfolio hasRegistered: depositoAgregado)
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:31:52' prior: 50612414!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| portfolio |
	portfolio:= PortfolioExistente new. 
	portfolio add: ReceptiveAccount new.
	
	self cuentaConDepositoDeValor: 5 verifica: [
		:segundaCuentaAAgregar :transaccionAgregada | 
		portfolio add: segundaCuentaAAgregar .
		self assert: (portfolio hasRegistered: transaccionAgregada )
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:33:10' prior: 50615186!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| portfolio |
	portfolio:= PortfolioExistente new. 
	portfolio add: ReceptiveAccount new.
	
	self cuentaConDepositoDeValor: 5 verifica: [
		:cuentaConDeposito :transaccionAgregada | 
		portfolio add: cuentaConDeposito .
		self assert: (portfolio hasRegistered: transaccionAgregada )
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:33:18' prior: 50615200!
test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta
	| portfolio |
	portfolio:= PortfolioExistente new. 
	portfolio add: ReceptiveAccount new.
	
	self cuentaConDepositoDeValor: 5 verifica: [
		:cuentaConDeposito :depositoAgregado | 
		portfolio add: cuentaConDeposito .
		self assert: (portfolio hasRegistered: depositoAgregado )
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:34:01' prior: 50612325!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| portfolio |
	portfolio := PortfolioExistente new.
	portfolio add: PortfolioExistente new .
	
	self portfolioConDepositoDeValor: 5 verifica:[
		:portfolioConDeposito :transaccionAgregada |  	
		portfolio add: portfolioConDeposito.
		self assert: (portfolio hasRegistered: transaccionAgregada)
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:34:08' prior: 50615228!
test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio
	| portfolio |
	portfolio := PortfolioExistente new.
	portfolio add: PortfolioExistente new .
	
	self portfolioConDepositoDeValor: 5 verifica:[
		:portfolioConDeposito :depositoAgregado |  	
		portfolio add: portfolioConDeposito.
		self assert: (portfolio hasRegistered: depositoAgregado)
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:34:45' prior: 50610235!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones

	| transaccionesCuenta |
	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica:[ 
		:portfolio :deposito :segundaTransaccion|
		transaccionesCuenta:= OrderedCollection with: deposito with: segundaTransaccion . 
	
		self assert:transaccionesCuenta equals: portfolio transactions.
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:34:52' prior: 50615257!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones

	| transaccionesCuenta |
	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica:[ 
		:portfolio :deposito :extraccion|
		transaccionesCuenta:= OrderedCollection with: deposito with: extraccion . 
	
		self assert:transaccionesCuenta equals: portfolio transactions.
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:35:01' prior: 50615272!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones

	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica:[ 
		:portfolio :deposito :extraccion|
		self assert:OrderedCollection with: deposito with: extraccion equals: portfolio transactions.
	]! !
!PortfolioTest methodsFor: 'testing' stamp: 'a 5/22/2023 12:35:12' prior: 50615286!
test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones

	self portfolioConDepositoDeValor: 5 yExtraccionDeValor: 5 verifica:[ 
		:portfolio :deposito :extraccion|
		self assert: (OrderedCollection with: deposito with: extraccion) equals: portfolio transactions.
	]! !

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:35:12'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:35:12'!
PASSED!

----SNAPSHOT----(22 May 2023 12:37:22) CuisUniversity-5706.image priorSource: 8997560!
!PortfolioExistente methodsFor: 'accessing' stamp: 'a 5/22/2023 12:41:34' prior: 50608758 overrides: 50608295!
transactions
	| totalTransactions |
	totalTransactions:=OrderedCollection new.
	^registros do:[ :registroActual | 
             registroActual contributeToTransactions: totalTransactions. 
 	].
! !
!PortfolioExistente methodsFor: 'accessing' stamp: 'a 5/22/2023 12:41:47' prior: 50615384 overrides: 50608295!
transactions
	| totalTransactions |
	totalTransactions:=OrderedCollection new.
	registros do:[ :registroActual | 
             registroActual contributeToTransactions: totalTransactions. 
 	].
	^totalTransactions 
! !

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:41:48'!
ERROR!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:41:48'!
ERROR!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:41:48'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:41:48'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:41:50'!
ERROR!
!PersonalRegister methodsFor: 'as yet unclassified' stamp: 'a 5/22/2023 12:42:08'!
contributeToTransactions: totalTransactions 
	self shouldBeImplemented.! !
!PersonalRegister methodsFor: 'accessing' stamp: 'a 5/22/2023 12:42:43' prior: 50615475!
contributeToTransactions: totalTransactions 
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'a 5/22/2023 12:42:49' overrides: 50615481!
contributeToTransactions: totalTransactions 
	self subclassResponsibility ! !
!Portfolio methodsFor: 'accessing' stamp: 'a 5/22/2023 12:42:49' overrides: 50615481!
contributeToTransactions: totalTransactions 
	self subclassResponsibility ! !

!methodRemoval: PersonalRegister #contributeToTransactions: stamp: 'a 5/22/2023 12:42:49'!
contributeToTransactions: totalTransactions 
	self subclassResponsibility !
!PortfolioExistente methodsFor: 'accessing' stamp: 'a 5/22/2023 12:42:54' overrides: 50615493!
contributeToTransactions: totalTransactions 
	self subclassResponsibility ! !
!PortfolioInexistente methodsFor: 'accessing' stamp: 'a 5/22/2023 12:42:54' overrides: 50615493!
contributeToTransactions: totalTransactions 
	self subclassResponsibility ! !

!methodRemoval: Portfolio #contributeToTransactions: stamp: 'a 5/22/2023 12:42:54'!
contributeToTransactions: totalTransactions 
	self subclassResponsibility !
!PersonalRegister methodsFor: 'accessing' stamp: 'a 5/22/2023 12:43:07'!
contributeToTransactions
	self subclassResponsibility ! !
!PortfolioExistente methodsFor: 'accessing' stamp: 'a 5/22/2023 12:46:07' prior: 50615504!
contributeToTransactions: totalTransactions 
	registros do: [:registroActual | 
		registroActual contributeToTransactions: totalTransactions 
	] ! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'a 5/22/2023 12:46:28' prior: 50615487!
contributeToTransactions: totalTransactions 
	totalTransactions addAll: transactions! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'a 5/22/2023 12:46:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioNuevoTieneBalanceCero stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioConUnaCuentaTieneElMismoBalance stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioConDosCuentasTieneElMismoBalance stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioConDosPortfoliosTieneElMismoBalance stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioVacioNoTieneAUnaTransaccion stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioConUnaCuentaTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioConDosCuentasTieneAUnaTransaccionEnEsaCuenta stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioConDosPortfoliosTieneAUnaTransaccionEnEsePortfolio stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioVacioNoTieneTransacciones stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test10LasTransaccionesDeUnPortfolioConUnaCuentaSonSoloEsasTransacciones stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test11LasTransaccionesDeUnPortfolioConDosCuentasSonEsasTransacciones stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test12LasTransaccionesDeUnPortfolioConDosPortfoliosSonEsasTransacciones stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioConUnaCuentaNoPermiteRepetidos stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioConPortfolioNoPermiteRepetidos stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioConPortfolioNietoNoPermiteRepetidos stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioConPadreNoPermiteRepetidos stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioConAbueloNoPermiteRepetidos stamp: 'a 5/22/2023 12:46:33'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioConCuentaNoPermiteRepetidosEnHijo stamp: 'a 5/22/2023 12:46:33'!
PASSED!
!PortfolioInexistente methodsFor: 'accessing' stamp: 'a 5/22/2023 12:46:49' prior: 50615510!
contributeToTransactions: totalTransactions 
! !

----SNAPSHOT----(22 May 2023 12:47:37) CuisUniversity-5706.image priorSource: 9079352!

----SNAPSHOT----(22 May 2023 12:48:19) CuisUniversity-5706.image priorSource: 9087536!